#!/usr/bin/env python

"""TheVideo.me Service Code"""

from unpacker import unpack as Unpack

USER_AGENT = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
RE_NORM = Regex(r'(https?:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)')
RE_PTKN = Regex(r"(eval\(function\(p,a,c,k,e,.+\|(?:jwv|x3C)\|.+\.split\('\|'\).*?\)\))")
RE_TKN = Regex(r'[\'\"\\]+?\/[\'\"\\]+?\+([^\+]+)\+.+?\\x3C\/script\>')
RE_TITLE = Regex(r'title\s*?\:\s*?[\'\"](.*?)[\'\"]\,')
RE_THUMB = Regex(r'image\s*?\:\s*?[\'\"]([^\'\"]+)[\'\"]')
RE_DUR = Regex(r'duration\s*?\:\s*?[\'\"](\d+)[\'\"]')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    title = RE_TITLE.search(page)
    if not title:
        raise Ex.MediaExpired

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1).strip('\'\" ') if rt else FALLBACK

    return VideoClipObject(
        title=title.group(1).strip('\'\" '),
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='TheVideo'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    http_headers = {'User-Agent': USER_AGENT}
    fmt_list = source_dict(url, http_headers)
    if not fmt_list:
        raise Ex.MediaNotAvailable

    return [
        MediaObject(
            video_resolution=item['label'][:-1],
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=item['file'], http_headers=http_headers)
                ]
            ) for item in reversed(Util.ListSortedByKey(fmt_list, 'label'))
        ]

####################################################################################################
def source_dict(url, http_headers):

    try:
        page = HTTP.Request(url, headers=http_headers, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    rptkn = RE_PTKN.search(page)
    rtkn = RE_TKN.search(Unpack(rptkn.group(1))) if rptkn else None
    rtoken = Regex(r'var\s*?{0}\=[\'\"]([^\'\"]+)[\'\"]'.format(rtkn.group(1))).search(page) if rtkn else None
    if not rtoken:
        Log.Error("* Error: Cannot find packer token")
        raise Ex.MediaNotAvailable

    http_headers['Referer'] = url
    try:
        packed = HTTP.Request('http://thevideo.me/jwv/{0}'.format(rtoken.group(1)), headers=http_headers, cacheTime=10).content.strip()
    except:
        Log.Exception("* Error handling packed URL >>>")
        raise Ex.MediaNotAvailable

    sources = Regex(r'sources:\s(.*),').search(page)
    rd = Regex(r'vt\=([^\'\"]+)[\'\"]').search(Unpack(packed))
    if not sources:
        Log.Warn(u"* Warning: Cannot find source list within '{0}'".format(url))
        raise Ex.MediaExpired
    elif not rd:
        Log.Error("* Error: Cannot find pass tokens within packed URL")
        raise Ex.MediaNotAvailable

    s = sources.group(1)
    s = s.replace('\'', '\"').replace('label', '\"label\"').replace('file', '\"file\"')

    data = JSON.ObjectFromString(s)
    [d.update({'file': d['file'] + '?direct=false&ua=1&vt={0}'.format(rd.group(1))}) for d in data]
    return data
