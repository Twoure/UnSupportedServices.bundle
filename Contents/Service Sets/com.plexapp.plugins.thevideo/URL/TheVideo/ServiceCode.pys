#!/usr/bin/env python

"""TheVideo.me Service Code"""

####################################################################################################
def NormalizeURL(url):

    if '/embed-' not in url:
        r = Regex(r'(?i)(https?:\/\/(?:www\.)?\w+\.\w+\/)([a-z0-9]+)').search(url)
        url = r.group(1) + 'embed-' + r.group(2) + '.html'

    return url

####################################################################################################
def MetadataObjectForURL(url):

    page = HTTP.Request(url).content
    title = Regex(r'title\s*?\:\s*?[\'\"](.*?)[\'\"]\,').search(page)
    if not title:
        raise Ex.MediaExpired

    rt = Regex(r'image\s*?\:\s*?[\'\"]([^\'\"]+)[\'\"]').search(page)
    rd = Regex(r'duration\s*?\:\s*?[\'\"](\d+)[\'\"]').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1).strip('\'\" ') if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title.group(1).strip('\'\" '),
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='TheVideo'
        )

####################################################################################################
def MediaObjectsForURL(url):

    mo = []
    fmt_list = source_dict(url)
    for item in reversed(sorted(fmt_list, key=lambda k: k['label'])):
        mo.append(MediaObject(
            video_resolution=item['label'][:-1],
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[PartObject(key=Callback(PlayVideo, url=url, label=item['label']))]
            ))

    if len(mo) != 0:
        return mo

    raise Ex.MediaNotAvailable

####################################################################################################
@indirect
def PlayVideo(url, label, **kwargs):

    fmt_list = source_dict(url)
    for item in fmt_list:
        if label == item['label']:
            Log.Debug('* PlayVideo URL  = %s' %item['file'])
            return IndirectResponse(VideoClipObject, key=item['file'])

    raise Ex.MediaNotAvailable

####################################################################################################
def source_dict(url):

    page = HTTP.Request(url).content
    sources = Regex(r'sources:\s(.*),').search(page)
    if not sources:
        raise Ex.MediaExpired

    s = sources.group(1)
    s = s.replace('\'', '\"').replace('label', '\"label\"').replace('file', '\"file\"')

    return JSON.ObjectFromString(s)
