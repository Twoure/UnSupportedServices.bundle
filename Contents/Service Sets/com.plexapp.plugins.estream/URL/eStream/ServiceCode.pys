#!/usr/bin/env python

"""
eStream.to Service Code
    :Pull all info from embed page.
"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_FILES = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\']+(?<!m3u8|smil))["\'], *?(?:[^,]+, *?)?["\']?label["\']? *?\: *?["\'](\d+p?|original)["\']?')
RE_FMT = Regex(r'^.*?(1080|720|480|360|240)$')
RE_NORM = Regex(r'(https?:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)')
RE_TITLE = Regex(r'[\"\']?title[\"\']?\s*?\:\s*?[\"\']([^\"\']+)[\"\']')
RE_THUMB = Regex(r'[\"\']?image[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+)[\"\']')
RE_DUR = Regex(r'[\"\']?duration[\"\']?\s*?\:\s*?[\"\'](\d+)[\"\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url)

    rt = RE_TITLE.search(page)
    rth = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rth.group(1) if rth else FALLBACK
    title = rt.group(1).strip() if rt else u"eStream | {0}".format(Regex(r'embed\-(\w+)').search(url).group(1))

    return VideoClipObject(
        title=title,
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='eStream'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    fmt_list = RE_FILES.findall(get_page(url))
    if not fmt_list:
        raise Ex.MediaExpired

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            video_resolution=f[:-1] if f.endswith('p') else (f if len(f) <= 4 else (RE_FMT.sub(r'\1', f))),
            parts=[
                PartObject(key=u)
                ]
            ) for u, f in fmt_list
        ]

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot access '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    if Regex(r'(File was deleted)').search(page):
        Log.Warn(u"* Warning: File missing for '{0}'".format(url))
        raise Ex.MediaExpired

    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))
    return page
