#!/usr/bin/env python

"""MegaMP4.net Service Code"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_NORM = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_SOURCES = Regex(r'(?s)sources *?\: *?(\[.*?\{[^\]]+\}.*?\]),')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url)
    html = HTML.ElementFromString(page)

    title = html.xpath('//div[@id="content"]/h2/text()')
    if not title:
        raise Ex.MediaExpired

    dnode = html.xpath('//span[@class="uploadate"]/text()')
    dstring = dnode[0].strip().replace('on ', '') if dnode else None
    oaa = None
    if dstring:
        try:
            oaa = Datetime.ParseDate(dstring)
        except:
            Log.Exception(u"* Error: cannot parse datetime for '{0}' >>>".format(url))

    page = get_packed_page(page)
    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title[0].strip('_').strip(),
        duration=int(rd.group(1)) * 1000 if rd else None,
        originally_available_at=oaa,
        year=int(oaa.year) if oaa else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='MegaMP4'
        )

####################################################################################################
def MediaObjectsForURL(url):

    page = get_packed_page(get_page(url))
    r = RE_SOURCES.search(page)
    if not r:
        raise Ex.MediaExpired

    sources = JSON.ObjectFromString(r.group(1).replace('label', '"label"').replace('file', '"file"'))
    [s.update({'label': int(s['label'])}) for s in sources]
    Log(u"* MegaMP4 Video Sources: '{0}'".format(sources))

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            video_resolution=str(s['label']),
            parts=[
                PartObject(key=s['file'])
                ]
            ) for s in reversed(Util.ListSortedByKey(sources, 'label'))
        ]

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def get_packed_page(page):
    packed = RE_PACKED.search(page)
    return Unpack(packed.group(1)) if packed else page
