#!/usr/bin/env python

"""VidUP.me Service Code"""

from unpacker import unpack as Unpack

USER_AGENT = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
RE_NORM = Regex(r'(https?://(?:www\.|beta\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_PTKN = Regex(r"(eval\(function\(p,a,c,k,e,.+\|(?:jwv|x3C)\|.+\.split\('\|'\).*?\)\))")
RE_TKN = Regex(r'["\'\\]+?/["\'\\]+? ?\+ ?([^\+]+)\+.+?\\x3C/script\>')
RE_SOURCES = Regex(r'sources *?\: *?(\[.*?\{[^\]]+\}.*?\]),')
RE_TITLE = Regex(r"title *?\: *?'(.+)'")
RE_THUMB = Regex(r'image *?\: *?["\'](http[^"\']+)["\']')
RE_SUM = Regex(r"description *?\: *?'(.+)'")
RE_DUR = Regex(r'duration *?\: *?["\'](\d+)["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url, {'User-Agent': USER_AGENT})

    rt = RE_TITLE.search(page)
    title = rt.group(1).strip() if rt else None
    if not title:
        raise Ex.MediaExpired

    rth = RE_THUMB.search(page)
    rs = RE_SUM.search(page)
    rd = RE_DUR.search(page)

    thumb = rth.group(1) if rth else FALLBACK

    return VideoClipObject(
        title=title,
        summary=rs.group(1) if rs else None,
        duration=int(rd.group(1))*1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='VidUP'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    http_headers = {'User-Agent': USER_AGENT}
    flist = source_dict(url, http_headers)
    if not flist:
        raise Ex.MediaNotAvailable

    Log(u"* VidUp Video Sources: '{0}'".format(flist))
    return [
        MediaObject(
            video_resolution=str(s['label']),
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=s['file'], http_headers=http_headers)
                ],
            ) for s in reversed(Util.ListSortedByKey(flist, 'label'))
        ]

####################################################################################################
def get_page(url, http_headers):
    try:
        page = HTTP.Request(url, headers=http_headers, cacheTime=10, encoding='utf-8', errors='replace').content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def source_dict(url, http_headers):

    page = get_page(url, http_headers)
    rptkn = RE_PTKN.search(page)
    rtkn = RE_TKN.search(Unpack(rptkn.group(1))) if rptkn else RE_TKN.search(page)
    rtoken = Regex(r'var *?{0}\=["\']([^"\']+)["\']'.format(rtkn.group(1).strip())).search(page) if rtkn else None
    if not rtoken:
        Log.Error("* Error: Cannot find packer token")
        raise Ex.MediaNotAvailable

    http_headers['Referer'] = url
    try:
        base_url = RE_NORM.search(url).group(1)
        packed = HTTP.Request('{}/jwv/{}'.format(base_url, rtoken.group(1)), headers=http_headers, cacheTime=10).content.strip()
    except:
        Log.Exception("* Error handling packed URL >>>")
        raise Ex.MediaNotAvailable

    sources = RE_SOURCES.search(page)
    rvt = Regex(r'vt\=([^"\']+)["\']').search(Unpack(packed))
    if not sources:
        Log.Warn(u"* Warning: Cannot find source list within '{0}'".format(url))
        raise Ex.MediaExpired
    elif not rvt:
        Log.Error("* Error: Cannot find pass tokens within packed URL")
        raise Ex.MediaNotAvailable

    s = sources.group(1).replace("'", '"')
    if '"file"' not in s:
        s = s.replace('file', '"file"')
    if '"label"' not in s:
        s = s.replace('label', '"label"')

    data = JSON.ObjectFromString(s)
    return [{'file': d['file'] + '?direct=false&ua=1&vt={0}'.format(rvt.group(1)), 'label': int(d['label'][:-1])} for d in data]
