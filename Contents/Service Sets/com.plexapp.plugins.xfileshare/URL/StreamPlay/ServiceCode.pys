#!/usr/bin/env python

"""StreamPlay.to Service Code"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed-|/)(\w+)')
RE_THUMB = Regex(r'["\']?image["\']? *?: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?: *?["\'](\d+)["\']')
RE_FILE = Regex(r'["\']?file["\']? *?: *?["\'](http[^"\']+(?<!m3u8|smil))["\']')
RE_RTMP = Regex(r'["\']?file["\']? *?: *?["\'](rtmp[^"\']+)["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    html = HTML.ElementFromString(get_page(nurl))

    if html.xpath('//title/text()')[0] == '404 - Not Found':
        raise Ex.MediaExpired

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    page = get_packed_page(get_page(url))
    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='StreamPlay'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page = get_packed_page(get_page(url))

    r = RE_FILE.search(page)
    if r:
        vurl = Regex(r'/(\w+)/v').sub(lambda x: '/'+x.group(1)[::-1]+'/v', r.group(1))
        Log.Debug(u"* PlayVideo URL = {0}".format(vurl))
        return IndirectResponse(VideoClipObject, key=vurl)

    r = RE_RTMP.search(page)
    if r:
        node = Regex(r'(.+?\/)(mp4\:.+)').search(r.group(1))
        player = node.group(1) if node else None
        clip = Regex(r'\?h=(\w+)$').sub(lambda x: '?h='+x.group(1)[::-1], node.group(2)) if node else None

        if player and clip:
            Log.Debug('* PlayVideo RTMP Stream')
            Log.Debug(u"* player = '{0}' | clip = '{1}'".format(player, clip))
            return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=clip))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_packed_page(page):
    r = RE_PACKED.search(page)
    return Unpack(r.group(1)) if r else page

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
