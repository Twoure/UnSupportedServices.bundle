#!/usr/bin/env python

"""Openload service code"""

from openload import decode_openload
import contextlib
import urllib2

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):

    if not '/embed/' in url:
        r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.(?:[^/]+\/)?)(?:.*?[/])?([^\/\.]+)').search(url)
        url = r.group(1) + 'embed/' + r.group(2)

    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//meta[@name="og:title"]/@content')
    if not title:
        raise Ex.MediaNotAvailable

    nthumb = html.xpath('//meta[@name="og:image"]/@content')
    thumb = nthumb[0] if nthumb else 'http://i.imgur.com/75YO83o.jpg'

    return VideoClipObject(
        title=title[0],
        thumb=thumb,
        source_title='Openload'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, headers=HTTP_HEADERS, encoding=('utf-8')).content
    except:
        raise Ex.MediaNotAvailable

    vurl = get_url_redirect(decode_openload(page))
    Log.Debug('* PlayVideo URL  = %s' %vurl)

    return IndirectResponse(VideoClipObject, key=vurl)

####################################################################################################
def get_url_redirect(url):

    try:
        req = urllib2.Request(url, headers=HTTP_HEADERS)
        req.get_method = lambda : 'HEAD'
        with contextlib.closing(urllib2.urlopen(req)) as resp:
            url = resp.geturl()
    except Exception as e:
        Log.Error('* get_url_redirect Error: %s' %str(e))

    return url
