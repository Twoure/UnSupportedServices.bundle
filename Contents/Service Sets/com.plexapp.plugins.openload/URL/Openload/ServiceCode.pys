#!/usr/bin/env python

"""Openload.co service code"""

#from openload import decode_openload
from openload import OpenloadStreamFromURL
import contextlib
import urllib2

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):

    if not '/embed/' in url:
        base = Regex(r'(https?:\/\/\w+\.\w+)\/\w+\/([^\/]+)(\/.+)?').search(url)
        url = base.group(1) + '/embed/' + base.group(2) + (base.group(3) if base.group(3) else '')

    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url, cacheTime=CACHE_1MINUTE)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//meta[@name="og:title"]/@content')
    if title:
        title = title[0]
    else:
        title = html.xpath('//span[@class="title"]/text()')
        if title:
            title = title[0]
        else:
            raise Ex.MediaNotAvailable

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    nthumb = html.xpath('//meta[@name="og:image"]/@content')
    thumb = nthumb[0] if nthumb else fallback

    return VideoClipObject(
        title=title.strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='Openload'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agent': USER_AGENT, 'Referer': url}
    ourl = OpenloadStreamFromURL(url, http_headers=http_headers)
    if ourl:
        rourl = get_url_redirect(ourl, http_headers)
        Log.Debug('* PlayVideo URL  = {}'.format(rourl))
        return IndirectResponse(VideoClipObject, key=rourl)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_url_redirect(url, http_headers):
    try:
        req = urllib2.Request(url, headers=http_headers)
        req.get_method = lambda : 'HEAD'
        with contextlib.closing(urllib2.urlopen(req)) as resp:
            url = resp.geturl()
    except Exception as e:
        Log.Critical('* get_url_redirect Error: %s' %str(e))
    return url
