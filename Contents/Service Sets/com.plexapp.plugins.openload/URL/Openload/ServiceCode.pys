#!/usr/bin/env python

"""Openload.co service code"""

from openload import OpenloadStreamFromURL

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://\w+\.\w+)/\w+/(\w+)(/.+)?')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed/' + r.group(2) + (r.group(3) if r.group(3) else '') if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url, cacheTime=CACHE_1MINUTE)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    title = html.xpath('//meta[@name="og:title"]/@content')
    if not title:
        title = html.xpath('//span[@class="title"]/text()')
        if not title:
            Log.Error(u"* Error: Cannot find title within '{0}'".format(url))
            raise Ex.MediaExpired

    nthumb = html.xpath('//meta[@name="og:image"]/@content')
    thumb = nthumb[0] if nthumb else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='Openload'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agent': USER_AGENT, 'Referer': url}
    ourl = OpenloadStreamFromURL(url, http_headers=http_headers)
    if ourl:
        vurl = None
        try:
            page = HTTP.Request(ourl, headers=http_headers, follow_redirects=False, method='HEAD').content
            vurl = ourl
        except Ex.RedirectError, e:
            if 'Location' in e.headers:
                vurl = e.headers['Location']
            elif 'location' in e.headers:
                vurl = e.headers['location']

        if vurl:
            Log.Debug(u"* PlayVideo URL  = {0}".format(vurl))
            return IndirectResponse(VideoClipObject, key=vurl)

    raise Ex.MediaNotAvailable
