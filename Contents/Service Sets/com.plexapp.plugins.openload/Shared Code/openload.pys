#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Code take from plugin IPTVPlayer: "https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/
# and modified for use with Plex Media Server by Twoure

from aadecode import aadecode
from jjdecode import JJDecoder
from unpacker import unpack as Unpack

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

def find_sid(text):
    r = Regex(r'(?s)var *?\w+ *?\= *?\$\(["\']\#(.+?)["\']\)\.text\(').findall(text)
    return sorted(r, key=len)[0] if r else False

def code_at(text):
    r = Regex(r'(?i)CodeAt\(0\) *\+ *(\d+)').search(text)
    return int(r.group(1)) if r else False

def pre_packer(c, z):
    if (90 if c <= "Z" else 122) >= ord(c)+z:
        return chr(ord(c)+z)
    return chr(ord(c)+z-26)

def decode_hiddenUrl(hurls, pkdlist, aadata_list):
    s = ""
    tmp = ""
    tmp2 = ""

    for item in pkdlist:
        try:
            p = item.replace('eval (function', 'eval(function')
            rp = Regex(r'(function\(z\).+?a\="([^"]+).+?\;\}\((\d+)\))').search(p)
            a = rp.group(2)
            z = int(rp.group(3))
            packed = p.replace(rp.group(0), "'"+String.Unquote(Regex(r'[a-zA-Z]').sub(lambda c: pre_packer(c.group(0), z), a), True)+"'")
            tmp += JJDecoder(Unpack(packed)).decode()
        except:
            Log.Exception("* Error decoding with unpacker, then jjdecode >>>")

    for item in aadata_list:
        try:
            tmp2 += aadecode(item)
        except:
            Log.Exception("* Error decoding with aadecode >>>")

    num = code_at(tmp+tmp2)
    sid = find_sid(tmp+tmp2)

    for hid, t in hurls:
        if hid == sid:
            try:
                m = ord(t[-1])
                for i in list(t):
                    j = ord(i)
                    if j == m:
                        j = j - 1
                    elif j == (m - 1):
                        j = j + 1
                    if (j >= 33) and (j <= 126):
                        j = 33 + ((j + 14) % 94)
                    s += chr(j)
            except:
                Log.Exception(u'* Cannot decode {}'.format(t))

            return s[:-1] + chr(ord(s[-1]) + num) if s and num else False
    return False

def OpenloadStreamFromURL(url, http_headers=None):
    if not http_headers:
        http_headers = {'User-Agnet': USER_AGENT, 'Referer': url}

    base = Regex(r'(https?://\w+\.\w+)/\w+/([^/]+)(/.+)?').search(url)
    eurl = base.group(1) + '/embed/' + base.group(2) + (base.group(3) if base.group(3) else '')

    try:
        page = HTTP.Request(eurl, encoding=('utf-8'), headers=http_headers, cacheTime=CACHE_1MINUTE).content
    except UnicodeDecodeError, ude:
        Log.Warn(u"* Warning: Content removed by Openload for '{0}'".format(eurl))
        Log(str(ude))
        return False
    except:
        Log(u"* Error handling '{0}' >>>".format(eurl))
        Log.Exception(u"* Error: Cannot Open/Decode Openload page >>>")
        return False

    html = HTML.ElementFromString(page)
    hiddenUrls = html.xpath('//span[@id]')
    hurls = list()
    for h in hiddenUrls:
        hurls.append((h.get('id'), h.text))

    pckd_list = Regex(r"(eval *?\(function\(p,a,c,k,e,.+\.split\(.+\).*?\)\))").findall(page)
    aadata_list = Regex(r'(?s)<script type="text/javascript">(ﾟωﾟ.*?)</script>').findall(page)
    if hurls:
        hurl = decode_hiddenUrl(hurls, pckd_list, aadata_list)
        if hurl:
            return u'https://openload.co/stream/{0}?mime=true'.format(hurl)
        else:
            Log.Error(u'* Cannot directly decode hiddenUrl.')
    else:
        Log.Warn(u'* No hiddenUrl to decode.')

    return False
