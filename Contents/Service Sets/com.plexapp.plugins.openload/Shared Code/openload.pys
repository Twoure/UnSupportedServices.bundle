#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Code take from plugin IPTVPlayer: "https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/
# and modified for use with Plex Media Server by Twoure (2/09/17)

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://\w+\.\w+)/\w+/([^/]+)(/.+)?')

def decode_hiddenUrl(hurls):
    for (hid, enc) in hurls:
        for fs in [-1, 1]:
            dec = ""
            decTab = dict()
            z = 2
            try:
                s = int(enc[0:2]) * fs
                while z < len(enc):
                    key = int(enc[z+3:z+5])
                    decTab[key] = chr(int(enc[z:z+3]) + s)
                    z += 5
                for k in range(len(decTab)):
                    dec += decTab[k]
                if dec and Regex(r'(~[0-9]{10}~)').search(dec):
                    return dec
            except:
                Log.Exception("* <decode_hiddenUrl> error decoding with method 2/09/17 >>>")
                continue
    return False

def OpenloadStreamFromURL(url, http_headers=None):
    if not http_headers:
        http_headers = {'User-Agnet': USER_AGENT, 'Referer': url}

    base = RE_NORM.search(url)
    eurl = base.group(1) + '/embed/' + base.group(2) + (base.group(3) if base.group(3) else '')

    try:
        page = HTTP.Request(eurl, encoding=('utf-8'), headers=http_headers, cacheTime=CACHE_1MINUTE).content
    except UnicodeDecodeError, ude:
        Log.Warn(u"* Warning: Content removed by Openload for '{0}'".format(eurl))
        Log(str(ude))
        return False
    except:
        Log(u"* Error handling '{0}' >>>".format(eurl))
        Log.Exception(u"* Error: Cannot Open/Decode Openload page >>>")
        return False

    html = HTML.ElementFromString(page)
    hiddenUrls = html.xpath('//span[@id]')
    if hiddenUrls:
        hurl = decode_hiddenUrl([(h.get('id'), h.text) for h in hiddenUrls])
        if hurl:
            return u'https://openload.co/stream/{0}?mime=true'.format(hurl)
        else:
            Log.Error(u'* Cannot directly decode hiddenUrl.')
    else:
        Log.Warn(u'* No hiddenUrl to decode.')
    return False
