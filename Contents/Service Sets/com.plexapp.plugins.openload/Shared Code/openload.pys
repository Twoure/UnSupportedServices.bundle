#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Code take from plugin IPTVPlayer: "https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/
# Modified for use with Plex Media Server by Twoure (03/28/17)

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://\w+\.\w+)/\w+/([^/]+)(/.+)?')

def decode_k(enc):
    dec = ''
    try:
        a = enc[0:24]
        b = []
        for i in range(0, len(a), 8):
            b.append(int(a[i:i + 8] or '0', 16))
        enc = enc[24:]
        j = 0
        k = 0
        while j < len(enc):
            c = 128
            d = 0
            e = 0
            f = 0
            more = True
            while more:
                if j + 1 >= len(enc):
                    c = 143
                f = int(enc[j:j + 2] or '0', 16)
                j += 2
                d += (f & 127) << e
                e += 7
                more = f >= c
            g = d ^ b[k % 3]
            for i in range(4):
                char_dec = (g >> 8 * i) & (c + 127)
                char = chr(char_dec)
                if char != '#':
                    dec += char
            k += 1
        return dec
    except:
        Log.Exception("* <openload.decode_k> - error: cannot decode with method 03/28/17 >>>")
    return False

def decode_hiddenUrl(hurls):
    for (hid, k) in hurls:
        if " " in k:
            continue
        dec = decode_k(k)
        if dec:
            return dec
    return False

def OpenloadStreamFromURL(url, http_headers=None):
    if not http_headers:
        http_headers = {'User-Agnet': USER_AGENT, 'Referer': url}

    base = RE_NORM.search(url)
    eurl = base.group(1) + '/embed/' + base.group(2) + (base.group(3) if base.group(3) else '')

    try:
        page = HTTP.Request(eurl, encoding=('utf-8'), headers=http_headers, cacheTime=CACHE_1MINUTE).content
    except UnicodeDecodeError, ude:
        Log.Warn(u"* Warning: Content removed by Openload for '{0}'".format(eurl))
        Log(str(ude))
        return False
    except:
        Log(u"* Error handling '{0}' >>>".format(eurl))
        Log.Exception(u"* Error: Cannot Open/Decode Openload page >>>")
        return False

    html = HTML.ElementFromString(page)
    hiddenUrls = html.xpath('//span[@id]')
    if hiddenUrls:
        hurl = decode_hiddenUrl([(h.get('id'), h.text) for h in hiddenUrls])
        if hurl:
            return u'https://openload.co/stream/{0}?mime=true'.format(hurl)
        else:
            Log.Error(u'* Cannot directly decode hiddenUrl.')
    else:
        Log.Warn(u'* No hiddenUrl to decode.')
    return False
