#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Code take from plugin IPTVPlayer: "https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/
# and modified for use with Plex Media Server by Twoure (03/19/17)

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://\w+\.\w+)/\w+/([^/]+)(/.+)?')

def decode_hiddenUrl(hurls):
    for (hid, k) in hurls:
        if " " in k:
            continue
        try:
            y = ord(k[0])
            e = y - 0x37
            d = max(2, e)
            e = min(d, len(k) - 0x24 - 2)
            t = k[e:e + 0x24]
            h = 0
            g = []
            while h < len(t):
                f = t[h:h+3]
                g.append(int(f, 0x8))
                h += 3
            v = k[0:e] + k[e+0x24:]
            p = []
            i = 0
            h = 0
            while h < len(v):
                B = v[h:h + 2]
                C = v[h:h + 3]
                f = int(B, 0x10)
                h += 0x2
                if (i % 3) == 0:
                    f = int(C, 8)
                    h += 1
                elif i % 2 == 0 and i != 0 and ord(v[i-1]) < 0x3c:
                    f = int(C, 0xa)
                    h += 1

                A = g[i % 0x7]
                f = f ^ 0xd5;
                f = f ^ A;
                p.append( chr(f) )
                i += 1
            return "".join(p)
        except:
            Log.Exception("* <decode_hiddenUrl> error decoding with method 03/19/17 >>>")
            continue
    return False

def OpenloadStreamFromURL(url, http_headers=None):
    if not http_headers:
        http_headers = {'User-Agnet': USER_AGENT, 'Referer': url}

    base = RE_NORM.search(url)
    eurl = base.group(1) + '/embed/' + base.group(2) + (base.group(3) if base.group(3) else '')

    try:
        page = HTTP.Request(eurl, encoding=('utf-8'), headers=http_headers, cacheTime=CACHE_1MINUTE).content
    except UnicodeDecodeError, ude:
        Log.Warn(u"* Warning: Content removed by Openload for '{0}'".format(eurl))
        Log(str(ude))
        return False
    except:
        Log(u"* Error handling '{0}' >>>".format(eurl))
        Log.Exception(u"* Error: Cannot Open/Decode Openload page >>>")
        return False

    html = HTML.ElementFromString(page)
    hiddenUrls = html.xpath('//span[@id]')
    if hiddenUrls:
        hurl = decode_hiddenUrl([(h.get('id'), h.text) for h in hiddenUrls])
        if hurl:
            return u'https://openload.co/stream/{0}?mime=true'.format(hurl)
        else:
            Log.Error(u'* Cannot directly decode hiddenUrl.')
    else:
        Log.Warn(u'* No hiddenUrl to decode.')
    return False
