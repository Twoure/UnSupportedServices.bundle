#!/usr/bin/env python

"""Vidto.me service code"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_FMT_LIST = Regex(r'[\"\']?label[\"\']?\s*?\:\s*?[\"\'](\d+p)[\"\']?\,\s*?[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']')
RE_NORM = Regex(r'(https?:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)')
RE_THUMB = Regex(r'[\"\']?image[\"\']?\:(?:\s|\\)?[\"\']([^\"\']+)[\"\']')
RE_DUR = Regex(r'[\"\']?duration[\"\']?\s*?\:\s*?[\"\'](\d+)[\"\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    try:
        html = HTML.ElementFromURL(nurl, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(nurl))
        raise Ex.MediaNotAvailable

    title = html.xpath('//h2[@class="video-page-head"]/text()')
    if not title:
        raise Ex.MediaNotAvailable

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    if not RE_FMT_LIST.findall(page):
        Log.Warn(u"* Cannot find Video URL list, Media Expired for '{0}'".format(url))
        raise Ex.MediaExpired

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1).strip('\\') if rt else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        duration=int(rd.group(1)) * 1000 if rd else None,
        source_title='Vidto'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    fmt_list = RE_FMT_LIST.findall(page)
    if not fmt_list:
        Log.Warn(u"* Cannot find Video URL list, Media Expired for '{0}'".format(url))
        raise Ex.MediaExpired

    return [
        MediaObject(
            video_resolution=f[:-1],
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=u)
                ],
            ) for f, u in reversed(fmt_list)
        ]
