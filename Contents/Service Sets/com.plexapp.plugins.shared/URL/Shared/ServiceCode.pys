#!/usr/bin/env python

"""
Shared.sx Service Code
    :Host server seems to be offline, will check later.
"""

USER_AGENT= 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    title = html.xpath('//meta[@property="full:title"]/@content')
    if not title:
        raise Ex.MediaExpired

    return VideoClipObject(
        title=String.Base64Decode(title[0]),
        thumb='http://i.imgur.com/75YO83o.jpg',
        source_title='Shared'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agent': USER_AGENT}
    try:
        html = HTML.ElementFromURL(url, headers=http_headers)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    data = dict()
    http_headers['Referer'] = url
    for item in html.xpath('//input'):
        data[item.get('name')] = item.get('value')

    if data:
        try:
            html = HTML.ElementFromURL(url, values=data, headers=http_headers)
        except:
            Log.Exception(u"* Error: Cannot handle post for '{0}' >>>".format(url))
            raise Ex.MediaNotAvailable

    vurl = html.xpath('//div[@class="stream-content"]/@data-url')
    if vurl:
        Log.Debug(u"* PlayVideo URL = {0}".format(vurl[0]))
        return IndirectResponse(VideoClipObject, key=vurl[0])

    raise Ex.MediaNotAvailable
