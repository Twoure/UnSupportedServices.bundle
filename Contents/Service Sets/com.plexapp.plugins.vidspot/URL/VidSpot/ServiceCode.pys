#!/usr/bin/env python

"""VidSpot.net service code"""

####################################################################################################
def NormalizeURL(url):
    if '/embed-' in url:
        url = url.replace('/embed-', '/').split('-')[0].rsplit('.', 1)[0]
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaNotAvailable

    fallback = 'http://i.imgur.com/75YO83o.jpg'

    try:
        data = get_data(HTTP.Request(get_embed_url(url)).content)
    except:
        raise Ex.MediaNotAvailable

    if data:
        return VideoClipObject(
            title=title[0].strip(),
            thumb=Resource.ContentsOfURLWithFallback([data['thumb'] if 'thumb' in data.keys() else fallback, fallback]),
            duration=int(data['duration']) * 1000 if 'duration' in data.keys() else None,
            source_title='VidSpot'
            )

    raise Ex.MediaNotAvailable

####################################################################################################
def MediaObjectsForURL(url):

    mo = []
    data = get_data(HTTP.Request(get_embed_url(url)).content)
    if data and 'url_list' in data.keys():
        for f, u in reversed(sorted(data['url_list'])):
            mo.append(MediaObject(
                container=Container.MP4,
                video_codec=VideoCodec.H264,
                audio_codec=AudioCodec.AAC,
                video_resolution=str(f),
                audio_channels=2,
                optimized_for_streaming=True,
                parts=[
                    PartObject(key=Callback(PlayVideo, url=u))
                    ]
                ))

    if len(mo) > 0:
        return mo

    raise Ex.MediaNotAvailable

####################################################################################################
#@indirect
def PlayVideo(url, **kwargs):
    Log.Debug('* PlayVideo ULR = %s' %url)
    return Redirect(url)

####################################################################################################
def get_data(page):
    data = dict()
    t = Regex(r'[\"\']?image["\']?\s*?\:\s*?[\"\'](http[^\"\']+)[\"\']').search(page)
    if t:
        data.update({'thumb': t.group(1)})

    d = Regex(r'[\"\']?duration["\']?\s*?\:\s*?[\"\'](\d+)[\"\']').search(page)
    if d:
        data.update({'duration': d.group(1)})

    u = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']\,\s*?[^\,]+\,\s*?[\"\']?label[\"\']?\s*?\:\s*?[\"\'](\d+p?)[\"\']?').findall(page)
    if len(u) is not None:
        data.update({'url_list': [((int(d) if d.lower()[len(d)-1:] != 'p' else int(d[:-1])), url) for url, d in u]})

    return data

####################################################################################################
def get_embed_url(url):
    if '/embed-' not in url:
        r = Regex(r'(?i)(https?\:\/\/(?:www\.)?\w+\.\w+\/)([a-z0-9]+)').search(url)
        url = r.group(1) + 'embed-' + r.group(2) + '.html'

    return url
