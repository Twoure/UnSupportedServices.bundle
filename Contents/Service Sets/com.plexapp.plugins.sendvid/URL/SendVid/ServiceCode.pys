#!/usr/bin/env python

"""SendVid.com Service Code"""

####################################################################################################
def NormalizeURL(url):

    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\/|\/)(\w+)').search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    rt = Regex(r'title\s*?\:\s*?\"([^\"]+)\"').search(page)
    if not rt:
        raise Ex.MediaExpired

    rth = Regex(r'var\s*?video\_poster\s*?\=\s*?[\'\"]([^\'\"]+)[\'\"]').search(page)
    rd = Regex(r'var\s*?video\_duration\s*?\=\s*?[\'\"](\d+(?:\.\d+)?)[\'\"]').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = fix_url(rth.group(1)) if rth else fallback
    duration = int(float(rd.group(1)) * 1000) if rd else None

    return VideoClipObject(
        title=rt.group(1).strip(),
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='SendVid'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            video_resolution=720,
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    r = Regex(r'var\s*?video\_source\s*?\=\s*?[\'\"]([^\'\"]+)[\'\"]').search(page)
    if r:
        Log.Debug(u"* PlayVideo URL = {0}".format(fix_url(r.group(1))))
        return IndirectResponse(VideoClipObject, key=fix_url(r.group(1)))

    raise Ex.MediaNotAvailable

####################################################################################################
def fix_url(url):
    if url.startswith('http'):
        return url
    elif url.startswith('//'):
        return 'http:' + url
    elif url.startswith('/'):
        return 'http:/' + url
    else:
        return 'http://' + url
