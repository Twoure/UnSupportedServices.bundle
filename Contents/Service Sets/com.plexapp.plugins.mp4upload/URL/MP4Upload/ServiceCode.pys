#!/usr/bin/env python

"""MP4Upload.com Service Code"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\']+(?<!m3u8|smil))["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    html = HTML.ElementFromString(get_page(nurl))

    title = html.xpath('//span[@class="dfilename"]/text()')
    if not title:
        raise Ex.MediaExpired

    thumb = html.xpath('//span[@class="snap"]/following-sibling::span/img/@src')
    thumb = thumb[0] if thumb else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='MP4Upload'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    r = RE_FILE.findall(get_page(url))
    for u in r:
        if ('blank.mp4' not in u) and ('error.mp4' not in u):
            Log.Debug(u"* PlayVideo URL = {0}".format(u))
            return IndirectResponse(VideoClipObject, key=u)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot handle '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
