#!/usr/bin/env python

"""
Nos(video|locker).com Service Code
    :Both sites provide an MP4 link and RTMP stream
    :MP4 IP Hash is incorrect, so for now only returning the RTMP stream
"""

from time import sleep

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/\?v=|/vj/video(?:main)?.php\?u=|/embed/)(\w+)')
RE_SMIL = Regex(r'["\'](http[^"\']+\.smil)["\']')
RE_FILE = Regex(r'["\'](http[^"\']+\.(?:mp4|flv|avi|mkv|mov|divx))["\']')

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    html = get_html(url, {'User-Agnet': USER_AGENT})

    if html.xpath('//b[starts-with(text(), "File Not Found")]'):
        raise Ex.MediaExpired

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    return VideoClipObject(
        title=title[0].strip(),
        thumb='http://i.imgur.com/75YO83o.jpg',
        source_title='Nosvideo'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agnet': USER_AGENT}
    html = get_html(url, http_headers)

    wait_time = html.xpath('//span[@id="cxc"]/text()')
    if wait_time:
        Log(u"* POST Wait time = {0}".format(wait_time[0].strip()))
        sleep(int(wait_time[0].strip()))

    values = dict()
    for item in html.xpath('//input'):
        values[item.get('name')] = item.get('value')

    if not values:
        raise Ex.MediaExpired

    http_headers['Referer'] = url
    try:
        page = HTTP.Request(url, values=values, headers=http_headers).content
    except:
        Log.Exception(u"* Error: Cannot handle '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    r = RE_SMIL.search(page)
    if r:
        try:
            smil = XML.ElementFromURL(r.group(1), cacheTime=10)
        except:
            Log.Exception(u"* Error: Cannot access '{0}' >>>".format(r.group(1)))
            raise Ex.MediaNotAvailable

        clip = smil.xpath('//video/@src')[0]
        player = smil.xpath('//meta/@base')[0]
        Log.Debug('* PlayVideo RTMP Stream')
        Log.Debug(u"* player = {0} | clip = {1}".format(player, clip))

        return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=clip))

    r = RE_FILE.search(page)
    if r:
        Log.Debug(u"* PlayVideo URL = {0}".format(r.group(1)))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_html(url, http_headers):
    try:
        html = HTML.ElementFromURL(url, headers=http_headers, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return html
