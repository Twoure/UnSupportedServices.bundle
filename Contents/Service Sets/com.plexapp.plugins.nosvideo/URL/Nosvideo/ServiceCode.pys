#!/usr/bin/env python

"""Nosvideo.com Service Code"""

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):
    r = Regex(r'(?i)(https?\:\/\/\w+\.\w+)(?:\/\?v=|\/vj/video(?:main)?.php\?u=|\/embed\/)([a-z0-9]+)').search(url)
    if r:
        url = r.group(1) + '/' + r.group(2)
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    if html.xpath('//b[starts-with(text(), "File Not Found")]'):
        raise Ex.MediaExpired

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    return VideoClipObject(
        title=title[0].strip(),
        thumb='http://i.imgur.com/75YO83o.jpg',
        source_title='Nosvideo'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agnet': USER_AGENT}
    try:
        html = HTML.ElementFromURL(url, headers=http_headers)
    except:
        raise Ex.MediaNotAvailable

    values = dict()
    for item in html.xpath('//input'):
        values.update({item.get('name'): item.get('value')})

    if not values:
        raise Ex.MediaExpired

    http_headers.update({'Referer': url})
    try:
        page = HTTP.Request(url, values=values, headers=http_headers).content
    except:
        raise Ex.MediaNotAvailable

    r = Regex(r'[\'\"](http[^\'\"]+\.(?:mp4|flv|avi|mkv|mov|divx))[\'\"]').search(page)
    if r:
        Log.Debug('* PlayVideo URL = \"%s\"' %r.group(1))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    raise Ex.MediaNotAvailable
