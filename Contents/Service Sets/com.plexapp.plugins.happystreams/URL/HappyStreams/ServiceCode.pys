#!/usr/bin/env python

"""HappyStreams.net Service Code"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\']+(?<!m3u8|smil))["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    page = get_post_page(url)
    html = HTML.ElementFromString(page)

    if html.xpath('//h2/text()'):
        t = html.xpath('//h2/text()')[0]
        title = Regex(r'Watch\s(.+?)$').search(t).group(1).strip()
    elif html.xpath('//title/text()'):
        t = html.xpath('//title/text()')[0]
        title = Regex(r'Watch\s(.+?)(?:flv|mp4|avi|mkv|webm|divx|xvid)?$').search(t).group(1).strip()
    elif html.xpath('//input[@name="fname"]/@value'):
        t = html.xpath('//input[@name="fname"]/@value')[0]
        title = t.replace('_', ' ').strip().replace('  ', ' ').strip().rsplit('.', 1)[0]
    else:
        raise Ex.MediaExpired

    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='HappyStreams'
        )

####################################################################################################
def MediaObjectsForURL(url):
    """Not always the same container, so left off"""

    return [
        MediaObject(
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page = get_post_page(url)
    packed = RE_PACKED.search(page)
    if packed:
        vurl = RE_FILE.search(Unpack(packed.group(1)))
        if vurl:
            Log.Debug(u'* PlayVideo URL = {0}'.format(vurl.group(1)))
            return IndirectResponse(VideoClipObject, key=vurl.group(1))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_post_page(url):
    try:
        html = HTML.ElementFromURL(url, cacheTime=CACHE_1MINUTE)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    values = dict()
    action_url = html.xpath('//form[@method="POST"]/@action')
    for item in html.xpath('//input'):
        values[item.get('name')] = item.get('value')

    if not values or not action_url:
        Log.Error("* Cannot find POST values or POST URL")
        raise Ex.MediaExpired

    try:
        page = HTTP.Request(action_url[0], values=values).content
    except:
        Log.Exception(u"* Error: Cannot handle '{0}' >>>".format(action_url[0]))
        raise Ex.MediaNotAvailable

    return page
