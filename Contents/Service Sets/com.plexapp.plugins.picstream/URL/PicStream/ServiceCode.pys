#!/usr/bin/env python

"""PicStream.tv Service Code"""

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)([A-Za-z0-9]+)').search(url)
    return r.group(1) + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    html = setup_pass_page(url)
    if (html == False):
        raise Ex.MediaNotAvailable

    title = html.xpath('//h1/text()')
    if title:
        title = (Regex(r'[Ww]atch\s+?(.+?)\s*?(?:[Ss]tream|$)').sub(r'\1', title[0]) if 'Watch' in title[0] else title[0]).strip()
    else:
        title = html.xpath('//title/text()')
        if title:
            title = (Regex(r'\s*?\-\s*?[Pp]ic\s*?[Ss]tream').sub('', title[0]) if title[0].endswith('- Pic Stream') else title[0]).strip()
        else:
            raise Ex.MediaExpired

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    th = html.xpath('//a[@class="video-preview"]/@data-source')
    thumb = th[0] if th else fallback

    return VideoClipObject(
        title=title,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='PicStream'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    html = setup_pass_page(url)
    if (html == False):
        raise Ex.MediaNotAvailable

    vurl = html.xpath('//video/@src')
    if vurl:
        Log.Debug('* PlayVideo ULR = %s' %vurl[0])
        return IndirectResponse(VideoClipObject, key=vurl[0])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_pass_url(page):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/[A-Za-z0-9]+[^\?]+\?pt\=[^\'\"]+)').search(page)
    return r.group(1) if r else False

####################################################################################################
def setup_pass_page(url):
    http_headers = {'User-Agent': USER_AGENT}
    try:
        page = HTTP.Request(url, headers=http_headers, sleep=3).content
        cookies = HTTP.CookiesForURL(url)
    except Exception as e:
        Log.Error('* Cannot open %s' %url)
        Log.Error(str(e))
        return False

    purl = get_pass_url(page)
    if not purl:
        Log.Error('* No pass url found')
        return False

    http_headers.update({'Referer': url, 'Cookie': cookies})
    Log(http_headers)
    try:
        return HTML.ElementFromURL(purl, headers=http_headers)
    except Exception as e:
        Log.Error('* Error getting html info from pass page')
        Log.Error(str(e))
        return False
