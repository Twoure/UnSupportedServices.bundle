#!/usr/bin/env python

"""SpeedVideo.net Service Code"""

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)embed\-(\w+)').search(url)
        url = r.group(1) + r.group(2) if r else url
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url, cacheTime=CACHE_1MINUTE)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    eurl = get_embed_url(url)
    try:
        page = HTTP.Request(eurl, cacheTime=CACHE_1MINUTE).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(eurl))
        raise Ex.MediaNotAvailable

    rt = Regex(r'[\'\"]?image[\'\"]?\s*?\:\s*?[\'\"](http[^\'\"]+)[\'\"]').search(page)
    rd = Regex(r'[\'\"]?duration[\'\"]?\s*?\:\s*?[\'\"](\d+)[\'\"]').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1) if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        duration=duration,
        source_title='SpeedVideo'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    url_list = get_fmt_list(url)
    if not url_list:
        Log.Warn(u"* Warning: Cannot find video URL list within '{0}'".format(url))
        raise Ex.MediaNotAvailable

    urls = list()
    eurl = get_embed_url(url)
    for r, f, u in sorted(url_list):
        if check_url(u, eurl) and (f not in [x[0] for x in urls]):
            urls.append((f, u))

    if urls:
        Log.Debug(u'* SpeedVideo URLs = {0}'.format(urls))
        mo = list()
        for fmt, vurl in urls:
            if (fmt == 'mp4') or (fmt == 'flv'):
                mo.append(MediaObject(
                    container=Container.FLV if fmt == 'flv' else Container.MP4,
                    video_codec=VideoCodec.H264,
                    audio_codec=AudioCodec.AAC,
                    audio_channels=2,
                    optimized_for_streaming=True,
                    parts=[PartObject(key=vurl)]
                    ))
            elif fmt == 'm3u8':
                mo.append(MediaObject(
                    audio_channels=2,
                    optimized_for_streaming=True,
                    parts=[PartObject(key=HTTPLiveStreamURL(url=vurl))]
                    ))

    if mo:
        return mo

    raise Ex.MediaNotAvailable

####################################################################################################
def get_fmt_list(url):

    url_list = list()
    eurl = get_embed_url(url)
    try:
        page = HTTP.Request(eurl, headers={'User-Agent': USER_AGENT, 'Referer': url}, cacheTime=CACHE_1MINUTE).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(eurl))
        return False

    fmt_list = Regex(r'var\s(linkfile.*?)\s\=[\'\"]([^\'\"]+)[\'\"]\;\s*?var\slinkfile.*?\=\sbase64\_decode\([^\,]+\,\s([^\)]+)').findall(page)
    if len(fmt_list) is not None:
        for l, b, k in fmt_list:
            rkey = Regex(r'var\s{0}\s*?\=\s*?(\d+)\;'.format(k)).search(page)
            if rkey:
                key = int(rkey.group(1))
                b = b[0:key] + b[key+10:]
                rank = 2 if 'Lq' in l else (1 if 'Backup' in l else 0)
                vurl = String.Base64Decode(b)
                fmt = vurl.split('.')[-1]
                url_list.append((rank, fmt, vurl))

    return url_list if url_list else False

####################################################################################################
def get_embed_url(url):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)(\w+)').search(url)
    return r.group(1) + 'embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def check_url(url, rurl):
    try:
        h = HTTP.Request(url, headers={'User-Agent': USER_AGENT, 'Referer': rurl}, method='HEAD', cacheTime=10).headers
        return 'html' not in h['content-type']
    except:
        Log.Exception(u"* Error checking '{0}' >>>".format(url))
    return False
