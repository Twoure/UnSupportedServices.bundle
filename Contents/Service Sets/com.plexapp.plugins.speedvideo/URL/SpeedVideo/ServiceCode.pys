#!/usr/bin/env python

"""SpeedVideo.net Service Code"""

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_FMT_LIST = Regex(r'(?s)var (linkfile.*?) \=["\']([^"\']+)["\']\;.*?var linkfile.*?\= base64\_decode\([^\,]+\, ([^\)]+)')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromString(get_page(norm_url(url)))

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    page = get_page(url)

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='SpeedVideo'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    try:
        url_list = get_fmt_list(url)
        if not url_list:
            raise Ex.MediaNotAvailable
    except:
        Log.Exception(u"* Error: Cannot find video URL list within '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    urls = list()
    for r, f, u in sorted(url_list):
        if check_url(u, url) and (f not in [x[0] for x in urls]):
            urls.append((f, u))

    if urls:
        Log.Debug(u'* SpeedVideo URLs = {0}'.format(urls))
        mo = list()
        for fmt, vurl in urls:
            if (fmt == 'mp4') or (fmt == 'flv'):
                mo.append(MediaObject(
                    container=Container.FLV if fmt == 'flv' else Container.MP4,
                    video_codec=VideoCodec.H264,
                    audio_codec=AudioCodec.AAC,
                    audio_channels=2,
                    optimized_for_streaming=True,
                    parts=[
                        PartObject(key=vurl)
                        ]
                    ))
            elif fmt == 'm3u8':
                mo.append(MediaObject(
                    audio_channels=2,
                    optimized_for_streaming=True,
                    parts=[
                        PartObject(key=HTTPLiveStreamURL(url=vurl))
                        ]
                    ))

    if mo:
        return mo

    raise Ex.MediaNotAvailable

####################################################################################################
def get_fmt_list(url):

    url_list = list()
    page = get_page(url, nrom_url(url))

    fmt_list = RE_FMT_LIST.findall(page)
    if len(fmt_list) is not None:
        for l, b, k in fmt_list:
            rkey = Regex(r'var\s{0}\s*?\=\s*?(\d+)\;'.format(k)).search(page)
            if rkey:
                key = int(rkey.group(1))
                b = b[0:key] + b[key+10:]
                rank = 2 if 'Lq' in l else (1 if 'Backup' in l else 0)
                vurl = String.Base64Decode(b)
                fmt = vurl.split('.')[-1]
                url_list.append((rank, fmt, vurl))

    if url_list:
        return url_list

    raise Ex.MediaNotAvailable

####################################################################################################
def norm_url(url):
    return url.replace('/embed-', '/') if '/embed-' in url else url

####################################################################################################
def get_page(url, rurl=None):
    rurl = rurl if rurl else url
    try:
        page = HTTP.Request(url, headers={'User-Agent': USER_AGENT, 'Referer': rurl}, cacheTime=CACHE_1MINUTE).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def check_url(url, rurl):
    try:
        h = HTTP.Request(url, headers={'User-Agent': USER_AGENT, 'Referer': rurl}, method='HEAD', cacheTime=10).headers
        return 'html' not in h['content-type']
    except:
        Log.Exception(u"* Error checking '{0}' >>>".format(url))
    return False
