#!/usr/bin/env python

"""FileNuke and ShareSix Service Code"""

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):
    return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

    try:
        tree = HTML.ElementFromURL(url, headers=HTTP_HEADERS)
        go_next = get_go_next(tree, url)
    except Exception as e:
        Log.Error('* MetadataObjectForURL Error: %s' %str(e))
        raise Ex.MediaNotAvailable

    if not go_next.startswith('/'):
        raise Ex.MediaExpired

    rurl = url.split('/')[0] + '//' + url.split('/')[2] + go_next
    try:
        page = HTTP.Request(rurl).content
        html = HTML.ElementFromString(page)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//dl[@class="file-info"]/dt[text()="Filename:"]/following-sibling::dd/text()')
    if not title:
        raise Ex.MediaExpired

    duration = html.xpath('//dl[@class="file-info"]/dt[text()="Length:"]/following-sibling::dd/text()')
    duration = Datetime.MillisecondsFromString(duration[0]) if duration else None

    data = get_data(page)
    if not data['url']:
        raise Ex.MediaNotAvailable

    st = Regex(r'https?\:\/\/(?:www\.)?(\w+)\.\w+').search(url)

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([data['thumb'], 'http://i.imgur.com/GEKTJP3.png']),
        duration=duration,
        source_title=st.group(1).title() if st else 'FileNuke'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        tree = HTML.ElementFromURL(url, headers=HTTP_HEADERS)
        go_next = get_go_next(tree, url)
    except Exception as e:
        Log.Error('* PlayVideo Error: %s' %str(e))
        raise Ex.MediaNotAvailable

    if not go_next.startswith('/'):
        raise Ex.MediaExpired

    rurl = url.split('/')[0] + '//' + url.split('/')[2] + go_next
    try:
        page = HTTP.Request(rurl, headers=HTTP_HEADERS).content
    except:
        raise Ex.MediaNotAvailable

    data = get_data(page)
    if data['url']:
        Log.Debug('* PlayVideo URL = %s' %data['url'])
        return IndirectResponse(VideoClipObject, key=data['url'], http_headers=HTTP_HEADERS)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_go_next(html, url):
    """
    if Regex(r'(?:\.|\/)(sharesix)\.').search(url):
        go_next = html.xpath('//td[starts-with(@class, "download")]/a/@href')[0]
    else:
    """
    go_next = html.xpath('//a[@id="go-next"]/@href')[0]
    return go_next

####################################################################################################
def get_data(page):
    rthumb = Regex(r'(?:\"|\')?image(?:\"|\')?(?:\s+)?\:(?:\s+)?(?:\"|\')([^\"\']+)(?:\"|\')').search(page)
    rvurl = Regex(r'(?:\"|\')?file(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(http[^\"\']+(?<!m3u8|smil))(?:\"|\')').search(page)
    if not rvurl:
        rvurl = Regex(r'var.+(?:\s+)?\=(?:\s+)?(?:\"|\')(http[^\"\']+(?<!m3u8|smil))(?:\"|\')').search(page)

    return {
        'thumb': rthumb.group(1) if rthumb else 'http://i.imgur.com/75YO83o.jpg',
        'url': rvurl.group(1) if rvurl else False
        }
