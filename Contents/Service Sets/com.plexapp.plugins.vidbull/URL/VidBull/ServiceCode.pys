#!/usr/bin/env python

"""VidBull.(com|co) Service Code"""

from unpacker import unpack as Unpack
from crypto.cipher.aes  import AES
from crypto.cipher.base import noPadding
from binascii import a2b_hex

RE_PACKED = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_NORM = Regex(r'(https?:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)')
RE_TITLE = Regex(r'(?:You are watching|Watch|Download)\s+?(.+?)\s+?online')
RE_VERIFY = Regex(r'(?s)[Vv]erifying\s*?[Vv]ideo\s*?[Rr]equest\s*?\-(.+?)$')
RE_WATCH = Regex(r'[Ww]atch\s+?(.+?)(?:(?:[Oo]nline)?\s+?\-\s+?[Vv]id[Bb]ull$|$)')
RE_THUMB = Regex(r'[\'\"]?image[\'\"]?\s*?\:\s*?[\"\'](http[^\"\']+)[\"\']')
RE_DUR = Regex(r'[\'\"]?duration[\'\"]?\s*?\:\s*?[\"\'](\d+)[\"\']')
RE_FILE = Regex(r'[\'\"]?file[\'\"]?\s*?\:\s*?[\"\']([^\"\']+)[\"\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    title = RE_TITLE.search(page)
    title = title.group(1) if title else None
    if not title:
        Log.Warn(u"* Cannot find title within '{0}', checking base page.".format(url))
        title = get_title(url)

    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title.strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        duration=int(rd.group(1)) * 1000 if rd else None,
        source_title='VidBull'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    r = RE_FILE.search(page)
    vurl = vidbull_decrypt(r.group(1)) if r else None

    if vurl:
        Log.Debug(u"* PlayVideo URL = {0}".format(vurl))
        return IndirectResponse(VideoClipObject, key=vurl)
    else:
        Log.Error('* VidBull Decryption Error')

    raise Ex.MediaNotAvailable

####################################################################################################
def ensure_unicode(v):
    if isinstance(v, str):
        v = v.decode('utf8')
    return unicode(v)

####################################################################################################
def vidbull_decrypt(f):
    key = "YTk0OTM3NmUzN2IzNjlmMTdiYzdkM2M3YTA0YzU3MjE="
    bkey, etb = a2b_hex(String.Base64Decode(key)), a2b_hex(f)
    kSize = len(bkey)
    alg = AES(bkey, keySize=kSize, padding=noPadding())
    url = alg.decrypt(etb).split('\x00')[0]
    return ensure_unicode(url) if url.startswith('http') else False

####################################################################################################
def get_title(url):
    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    try:
        html = HTML.ElementFromURL(nurl, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(nurl))
        raise Ex.MediaNotAvailable

    title = html.xpath('//h3/text()')
    if title:
        title = RE_VERIFY.sub(r'\1', title[0].strip()) if 'verifying video request' in title[0].lower() else title[0]
    else:
        title = html.xpath('//title/text()')
        if title:
            title = RE_WATCH.sub(r'\1', title[0].strip()) if 'watch ' in title[0].lower() else title[0]
        else:
            raise Ex.MediaExpired
    return title.strip()
