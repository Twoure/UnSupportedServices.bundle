#!/usr/bin/env python

"""Vidto service code"""

from unpacker import unpack as Unpack

####################################################################################################
def NormalizeURL(url):

    return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//h2[@class="video-page-head"]/text()')
    if not title:
        raise Ex.MediaNotAvailable

    thumb = 'http://i.imgur.com/75YO83o.jpg'
    duration = None

    packed = get_packed_data(HTTP.Request(get_embed_url(url)).content)
    if packed:
        data = Unpack(packed.group(1))
        rt = Regex(r'(?:\"|\')?image(?:\"|\')?\:(?:\s|\\)?(?:\"|\')([^\"\']+)(?:\"|\')').search(data)
        rd = Regex(r'(?:\"|\')?duration(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(\d+)(?:\"|\')').search(data)
        if rt:
            thumb = rt.group(1).strip('\\')
        if rd:
            duration = int(rd.group(1)) * 1000

    return VideoClipObject(
        title=title[0].strip(),
        thumb=thumb,
        duration=duration,
        source_title=get_source_title(url)
        )

####################################################################################################
def MediaObjectsForURL(url):

    mo = []
    packed = get_packed_data(HTTP.Request(get_embed_url(url)).content)
    if packed:
        data = Unpack(packed.group(1))
        for f, u in reversed(get_fmt_list(data)):
            mo.append(MediaObject(
                video_resolution=f[:-1],
                audio_channels=2,
                optimized_for_streaming=False,
                parts=[
                    PartObject(key=Callback(PlayVideo, url=url, fmt=f))
                    ]
                ))

    if len(mo) > 0:
        return mo

    raise Ex.MediaNotAvailable

####################################################################################################
@indirect
def PlayVideo(url, fmt, **kwargs):

    packed = get_packed_data(HTTP.Request(get_embed_url(url)).content)
    if packed:
        data = Unpack(packed.group(1))
        for f, u in reversed(get_fmt_list(data)):
            if f == fmt:
                Log.Debug('* PlayVideo ULR = %s' %u)
                return IndirectResponse(VideoClipObject, key=u)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_packed_data(page):
    return Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(page)

####################################################################################################
def get_fmt_list(page):
    return Regex(r'(?:\"|\')?label(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(\d+p)(?:\"|\')?\,(?:\s)?(?:\"|\')?file(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(http[^\"\']+(?<!m3u8|smil))(?:\"|\')').findall(page)

####################################################################################################
def get_embed_url(url):
    rurl = Regex(r'(https?\:\/\/(?:www\.)?\w+\.(?:[^/]+\/)?)(?:.*?[/])?([^\/\.]+)').search(url)
    return rurl.group(1) + 'embed-' + rurl.group(2) + '.html'

####################################################################################################
def get_source_title(url):
    """get source title from url"""

    stitle = url.split('/')[2]
    sltitle = stitle.split('.')
    if len(sltitle) > 2:
        return sltitle[1].title()+'.'+sltitle[2]
    else:
        return sltitle[0].title()+'.'+sltitle[1]
