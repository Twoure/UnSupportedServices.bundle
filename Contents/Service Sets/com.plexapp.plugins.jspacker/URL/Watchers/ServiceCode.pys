#!/usr/bin/env python

"""Watchers.to Service Code"""

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

from unpacker import unpack as Unpack

####################################################################################################
def NormalizeURL(url):
    if '/embed-' not in url:
        r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)').search(url)
        url = r.group(1) + '/embed-' + r.group(2) + '.html' if r else url
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    if Regex(r'(File was deleted)').search(page):
        raise Ex.MediaExpired

    packed = get_packed_data(page)
    if packed:
        page = Unpack(packed.group(1))

    rt = Regex(r'[\"\']?title[\"\']?\s*?\:\s*?[\"\']([^\"\']+)[\"\']').search(page)
    rth = Regex(r'[\"\']?image[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+)[\"\']').search(page)
    rd = Regex(r'[\"\']?duration[\"\']?\s*?\:\s*?[\"\'](\d+)[\"\']').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rth.group(1) if rth else fallback
    duration = int(rd.group(1)) * 1000 if rd else None
    title = rt.group(1).strip() if rt else 'Watchers | %s' %Regex(r'embed\-(\w+)').search(url).group(1)

    return VideoClipObject(
        title=title,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='Watchers'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts=[PartObject(
                key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
                )]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    packed = get_packed_data(page)
    if packed:
        page = Unpack(packed.group(1))

    r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+\.m3u8)[\"\']').search(page)
    if r:
        Log.Debug('* PlayVideo ULR = %s' %r.group(1))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_packed_data(page):
    return Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file|src).+\.split\('\|'\)\)\))").search(page)
