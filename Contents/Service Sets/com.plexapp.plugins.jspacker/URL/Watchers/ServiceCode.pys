#!/usr/bin/env python

"""
Service Code for:
    Watchers.to, eStream.to, PlayU.me

Pull all info from embed page
"""

from unpacker import unpack as Unpack

####################################################################################################
def NormalizeURL(url):
    if '/embed-' not in url:
        r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)').search(url)
        url = r.group(1) + '/embed-' + r.group(2) + '.html' if r else url
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot access '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    if Regex(r'(File was deleted)').search(page):
        Log.Warn(u"* Warning: File missing for '{0}'".format(url))
        raise Ex.MediaExpired

    packed = get_packed_data(page)
    if packed:
        page = Unpack(packed.group(1))

    rt = Regex(r'[\"\']?title[\"\']?\s*?\:\s*?[\"\']([^\"\']+)[\"\']').search(page)
    rth = Regex(r'[\"\']?image[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+)[\"\']').search(page)
    rd = Regex(r'[\"\']?duration[\"\']?\s*?\:\s*?[\"\'](\d+)[\"\']').search(page)
    st = Regex(r'https?\:\/\/(?:www\.)?(\w+)\.\w+').search(url)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rth.group(1) if rth else fallback
    duration = int(rd.group(1)) * 1000 if rd else None
    title = rt.group(1).strip() if rt else u"Watchers | {0}".format(Regex(r'embed\-(\w+)').search(url).group(1))

    return VideoClipObject(
        title=title,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title=st.group(1).title() if st else 'Watchers'
        )

####################################################################################################
def MediaObjectsForURL(url):

    if Regex(r'(?:\.|\/)(playu)\.').search(url):
        return [
            MediaObject(
                video_resolution='sd',
                audio_channels=2,
                optimized_for_streaming=False,
                parts=[
                    PartObject(
                        key=Callback(PlayVideo, url=url)
                        )
                    ]
                )
            ]
    else:
        return [
            MediaObject(
                parts=[
                    PartObject(
                        key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
                        )
                    ]
                )
            ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot access '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    packed = get_packed_data(page)
    if packed:
        page = Unpack(packed.group(1))

    if Regex(r'(?:\.|\/)(playu)\.').search(url):
        r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']').search(page)
    else:
        r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+\.m3u8)[\"\']').search(page)

    if r:
        Log.Debug(u"* PlayVideo URL = {0}".format(r.group(1)))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_packed_data(page):
    return Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:\|file\||\|src\|).+\.split\('\|'\).*?\)\))").search(page)
