#!/usr/bin/env python

"""VShare Service Code"""

from unpacker import unpack as Unpack
from urllib import  urlencode
import contextlib
import urllib2

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/').split('-')[0]

    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    if '404 Not Found' in html.xpath('//title/text()'):
        raise Ex.MediaExpired

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaNotAvailable

    duration = None
    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = fallback
    data = source_text(url)
    if data:
        rthumb = Regex(r'[\"\']?image[\"\']?\:\s*?[\"\']([^\"\']+)[\"\']').search(data)
        thumb = rthumb.group(1) if rthumb else fallback

        rd = Regex(r'[\"\']?duration[\"\']?\s*?\:\s*?[\"\'](\d+)[\"\']').search(data)
        duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title[0],
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        duration=duration,
        source_title='VShare'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    data = source_text(url)
    if data:
        vurl = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']').search(data)
        if vurl:
            video_url = vurl.group(1)
            if not check_url(video_url, get_embed_url(url)):
                html = HTML.ElementFromURL(url)
                pdata = dict()
                for item in html.xpath('//input'):
                    pdata.update({item.get('name'): item.get('value')})

                if bool(pdata):
                    page = HTTP.Request(url, headers={'User-Agent': USER_AGENT, 'Referer': url}, data=urlencode(pdata)).content
                    vurl2 = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']').search(page)
                    if vurl2:
                        video_url = vurl2.group(1)

            Log.Debug('* PlayVideo URL  = %s' %video_url)
            return IndirectResponse(VideoClipObject, key=video_url)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_embed_url(url):

    r = Regex(r'(https?:\/\/(?:www\.)?vshare\.(?:[^/]+\/)?)(.*?)(?:\/|\.|$)').search(url)
    url = r.group(1) + 'embed-' + r.group(2) + '.html'

    return url

####################################################################################################
def source_text(url):

    page = HTTP.Request(get_embed_url(url), headers={'User-Agent': USER_AGENT, 'Referer': url}).content
    data = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(page)

    return Unpack(data.group(1)) if data else page

####################################################################################################
def check_url(url, ref_url):

    try:
        req = urllib2.Request(url, headers={'User-Agent': USER_AGENT, 'Referer': ref_url})
        req.get_method = lambda : 'HEAD'
        try:
            with contextlib.closing(urllib2.urlopen(req)) as resp:
                h = resp.info()
            return True
        except urllib2.HTTPError, e:
            Log.Error('* check_url: %s' %str(e))
    except Exception as er:
        Log.Critical('* check_url: %s' %str(er))

    return False
