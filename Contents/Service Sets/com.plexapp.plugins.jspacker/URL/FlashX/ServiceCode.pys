#!/usr/bin/env python

"""FlashX Service Code"""

from unpacker import unpack as Unpack
from time import sleep

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/')
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaNotAvailable

    image = html.xpath('//meta[@property="og:image"]/@content')
    thumb = 'http://i.imgur.com/75YO83o.jpg'
    if image:
        thumb = thumb[0]

    return VideoClipObject(
        title=title[0].strip(),
        thumb=thumb,
        source_title=url.split('/')[2].title()
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
    html = HTML.ElementFromURL(url)

    post_values = {}
    action_url = html.xpath('//form[@method="POST"]/@action')
    if not action_url:
        raise Ex.MediaExpired

    for item in html.xpath('//form[@method="POST"]/input'):
        post_values.update({item.get('name'), item.get('value')})

    sleep(5)
    res = HTTP.Request(action_url[0], values=post_values).content
    packed = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(res)
    if packed:
        data = Unpack(packed.group(1))
        vurl = Regex(r'(?:\"|\')?file(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(http[^\"\']+(?<!m3u8|smil))(?:\"|\')').search(data)
        if vurl:
            Log.Debug('* PlayVideo URL  = %s' %vurl.group(1))
            return IndirectResponse(VideoClipObject, key=vurl.group(1))

    raise Ex.MediaNotAvailable
