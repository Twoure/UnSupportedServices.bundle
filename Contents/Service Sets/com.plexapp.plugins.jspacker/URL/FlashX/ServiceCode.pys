#!/usr/bin/env python

"""FlashX.tv Service Code"""

from unpacker import unpack as Unpack

USER_AGENT = 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1'

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/').split('-')[0]
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url, headers={'User-Agent': USER_AGENT})
    except:
        Log.Exception(u"* Error loading '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    image = html.xpath('//meta[@property="og:image"]/@content')
    thumb = image[0] if image else fallback

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='FlashX'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
    http_headers = {'User-Agent': USER_AGENT, 'Referer': url}
    try:
        html = HTML.ElementFromURL(url, sleep=5, headers=http_headers)
    except:
        Log.Exception(u"* Error loading '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    post_values = dict()
    action_url = html.xpath('//form[@method="POST"]/@action')
    if not action_url:
        raise Ex.MediaExpired

    for item in html.xpath('//form[@method="POST"]/input'):
        post_values.update({item.get('name'): item.get('value')})

    page = HTTP.Request(action_url[0], encoding='utf8', errors='ignore', values=post_values, headers=http_headers, method='POST').content
    packed = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:\|file\|).+\.split\('\|'\).*?\)\))").search(page)
    if packed:
        data = Unpack(packed.group(1))
        vurl = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']').search(data)
        if vurl:
            Log.Debug(u"* PlayVideo URL = {0}".format(vurl.group(1)))
            return IndirectResponse(VideoClipObject, key=vurl.group(1), user_agent=USER_AGENT)

    raise Ex.MediaNotAvailable
