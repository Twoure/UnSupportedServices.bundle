#!/usr/bin/env python

"""NeoDrive.co and CloudZilla.to Service Code"""

from unpacker import unpack as Unpack

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):

    if '/embed/' not in url:
        r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.(?:[^/]+\/)?)(?:\w+[/])?(?:\w+[/])?([^\/\.]+)').search(url)
        url = r.group(1) + 'embed/' + r.group(2)
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    if Regex(r'(404.*?Page\sNot\sFound)').search(page):
        raise Ex.MediaExpired

    st = Regex(r'https?\:\/\/(?:www\.)?(\w+)\.\w+').search(url)

    packed_data = get_packed_data(page)
    if packed_data:
        data = get_data(Unpack(packed_data.group(1)))
        if not data:
            raise Ex.MediaExpired

        return VideoClipObject(
            title=data['title'],
            thumb=data['thumbnail'],
            source_title=st.group(1).title() if st else 'Neodrive'
            )

    raise Ex.MediaNotAvailable

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    packed_data = get_packed_data(HTTP.Request(url, headers=HTTP_HEADERS).content)
    if packed_data:
        data = get_data(Unpack(packed_data.group(1)))
        if data:
            Log.Debug('* PlayVideo URL = \"%s\"' %data['url'])
            return IndirectResponse(VideoClipObject, key=data['url'], http_headers=HTTP_HEADERS)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_data(page):
    keys = ['title', 'thumbnail', 'url']
    data = {}
    for k in keys:
        r = Regex(r'var\s*?v%s\s*?\=\s*?[?\"\']([^\'\"]+)[\"\']' %k).search(page)
        if r:
            data.update({k: r.group(1)})
    return data

####################################################################################################
def get_packed_data(page):
    return Regex(r"(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)(?:,\d+,\{\})?\)\))").search(page)
