#!/usr/bin/env python

"""Up2stream Service Code"""

from unpacker import unpack as Unpack

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):

    if not 'view.php?' in url:
        url = url.replace('?', 'view.php?')

    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    htitle = html.xpath('//title/text()')
    title = 'Up2stream'
    if htitle:
        rtitle = Regex(r'[Uu]p2stream\.\w+\s+\-\s+(.+)').search(htitle[0])
        if not rtitle:
            raise Ex.MediaExpired

        title = rtitle.group(1) if rtitle else htitle[0]

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = html.xpath('//video/@poster')
    thumb = thumb[0] if thumb else fallback

    return VideoClipObject(
        title=title,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='Up2stream'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, headers=HTTP_HEADERS).content
    except:
        raise Ex.MediaNotAvailable

    packed = Regex(r"(eval\(function\(p,a,c,k,e,.+(?:src).+\.split\('\|'\).*\)\))").search(page)
    if packed:
        data = Unpack(packed.group(1))
        if data:
            vurl = Regex(r'(?:\"|\')?src(?:\"|\')?(?:\s)?\,(?:\s)?(?:\"|\')(http[^\"\']+(?<!m3u8|smil))(?:\"|\')').search(data)
            if vurl:
                Log.Debug('* PlayVideo URL = %s' %vurl.group(1))
                return IndirectResponse(VideoClipObject, key=vurl.group(1), http_headers=HTTP_HEADERS)

    raise Ex.MediaNotAvailable
