#!/usr/bin/env python

"""SaveFile.co Service Code"""

from unpacker import unpack as Unpack

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/').split('-')[0]
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//tr/td/b[text()="Filename:"]/../../td/text()')
    if not title:
        raise Ex.MediaExpired

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = html.xpath('//tr/td/b[text()="Snapshot:"]/../a/@href')
    thumb = thumb[0] if thumb else fallback

    duration = html.xpath('//tr/td/b[text()="Length:"]/../../td/text()')

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        duration=Datetime.MillisecondsFromString(duration[0]) if duration else None,
        source_title='SaveFile'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    packed = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:\|file\|).+\.split\('\|'\)\)\))").search(page)
    page = Unpack(packed.group(1)) if packed else page

    r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\'\?]+(?<!m3u8|smil))[\"\']').search(page)
    if r:
        Log.Debug('* PlayVideo ULR = %s' %r.group(1).replace(' ', '%20'))
        return IndirectResponse(VideoClipObject, key=r.group(1).replace(' ', '%20'))

    raise Ex.MediaNotAvailable
