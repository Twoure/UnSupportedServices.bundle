#!/usr/bin/env python

"""Speedvid.net Service Code"""

from unpacker import unpack as Unpack

REGEX_PACKED = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:\|file\|).+\.split\('\|'\).*?\)\))")

####################################################################################################
def NormalizeURL(url):

    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)').search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url, cacheTime=10).content
        html = HTML.ElementFromString(page)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    title = html.xpath('//title/text()')

    if Regex(r'(File was deleted)').search(page):
        Log.Warn(u"* Warning: File missing for '{0}'".format(url))
        raise Ex.MediaExpired
    elif not title:
        raise Ex.MediaExpired

    packed = REGEX_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    rt = Regex(r'\\?[\"\']?image\\?[\"\']?\s*?\:\s*?\\?[\"\'](http[^\"\'\\]+)\\?[\"\']').search(page)
    rd = Regex(r'\\?[\"\']?duration\\?[\"\']?\s*?\:\s*?\\?[\"\'](\d+)\\?[\"\']').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1) if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title[0].split(' - Speedvid')[0],
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='SpeedVid'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    packed = REGEX_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    r = Regex(r'\\?[\"\']?file\\?[\"\']?\s*?\:\s*?\\?[\"\'](http[^\"\'\?\\]+(?<!m3u8|smil))\\?[\"\']').search(page)
    if r:
        Log.Debug(u"* PlayVideo URL = {0}".format(r.group(1)))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    html = HTML.ElementFromString(page)
    r2 = html.xpath('//video/source/@src')
    if r2:
        Log.Debug(u"* PlayVideo URL = {0}".format(r2[0]))
        return IndirectResponse(VideoClipObject, key=r2[0])

    raise Ex.MediaNotAvailable
