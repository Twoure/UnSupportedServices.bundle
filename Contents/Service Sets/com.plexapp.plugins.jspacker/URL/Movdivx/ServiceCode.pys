#!/usr/bin/env python

"""Movdivx Service Code"""

from unpacker import unpack as Unpack
import urllib2
import contextlib

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/')
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    title = title[0].strip()
    data = get_data(url)
    if not data['url']:
        raise Ex.MediaNotAvailable

    return VideoClipObject(
        title=title,
        thumb=Resource.ContentsOfURLWithFallback([data['thumb'], 'http://i.imgur.com/75YO83o.jpg']),
        source_title='Movdivx'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    data = get_data(url)
    if data['url']:
        Log.Debug('* PlayVideo ULR = %s' %data['url'])
        return IndirectResponse(VideoClipObject, key=data['url'])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_data(url):
    data = {}
    thumb = 'http://i.imgur.com/75YO83o.jpg'
    vurl = False

    page = HTTP.Request(get_embed_url(url), headers=HTTP_HEADERS).content
    packed = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:src).+\.split\('\|'\)\)\))").search(page)

    if packed:
        pdata = Unpack(packed.group(1))
        if pdata:
            rhtml = Regex(r'document\.write\(\\\'([^\\\']+)').search(pdata)
            if rhtml:
                html = HTML.ElementFromString(rhtml.group(1))
                hurl = html.xpath('//param[@name="src"]/@value')
                hthumb = html.xpath('//param[@name="previewImage"]/@value')
                if hthumb:
                    thumb = hthumb[0]
                if hurl:
                    try:
                        req = urllib2.Request(hurl[0], headers=HTTP_HEADERS)
                        req.get_method = lambda : 'HEAD'
                        with contextlib.closing(urllib2.urlopen(req)) as resp:
                            h = resp.headers
                        if 'html' not in h['Content-Type']:
                            vurl = hurl[0]
                    except Exception as e:
                        Log.Error('* get_data Error: %s' %str(e))

    data.update({'url': vurl, 'thumb': thumb})
    return data

####################################################################################################
def get_embed_url(url):
    r = Regex(r'(https?:\/\/(?:www\.)?movdivx\.(?:[^/]+\/)?)(.*?)(?:\/|\.|$)').search(url)
    return r.group(1) + 'embed-' + r.group(2) + '.html'
