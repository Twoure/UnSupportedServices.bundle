#!/usr/bin/env python

"""
Service Code for:
    Movdivx.com, xvidstage.com, TusFiles.net, uploadkadeh.ir
"""

from unpacker import unpack as Unpack
import urllib2
import contextlib

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/').split('-')[0]
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url).content
        html = HTML.ElementFromString(page)
    except:
        raise Ex.MediaNotAvailable

    vid = Regex(r'(?i)https?\:\/\/(?:www\.)?\w+\.\w+\/([a-z0-9]+)').search(url).group(1)
    rt = Regex(r'%s\](.+?)\-\s\d+(?:\.\d+)?\sMB' %vid).search(page)
    if rt:
        title = rt.group(1).strip()
    else:
        title = html.xpath('//input[@name="fname"]/@value')
        if title:
            title = title[0].strip()
        else:
            raise Ex.MediaExpired

    data = get_data(url)
    if 'url' not in data.keys():
        raise Ex.MediaNotAvailable

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = data['thumb'] if 'thumb' in data.keys() else fallback

    st = Regex(r'https?\:\/\/(?:www\.)?(\w+)\.\w+').search(url)

    return VideoClipObject(
        title=title,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        duration=Datetime.MillisecondsFromString(data['duration']) if 'duration' in data.keys() else None,
        source_title=st.group(1).title() if st else 'Movdivx'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    data = get_data(url)
    if 'url' in data.keys():
        Log.Debug('* PlayVideo ULR = %s' %data['url'])
        return IndirectResponse(VideoClipObject, key=data['url'])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_data(url):
    data = dict()

    page = HTTP.Request(get_embed_url(url), headers=HTTP_HEADERS).content
    packed = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:src).+\.split\('\|'\)\)\))").search(page)
    fpacked = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(page)

    if packed:
        pdata = Unpack(packed.group(1))
        if pdata:
            rhtml = Regex(r'document\.write\(\\\'([^\\\']+)').search(pdata)
            if rhtml:
                html = HTML.ElementFromString(rhtml.group(1))
                hurl = html.xpath('//param[@name="src"]/@value')
                hthumb = html.xpath('//param[@name="previewImage"]/@value')
                if hthumb:
                    data.update({'thumb': hthumb[0]})
                if hurl and check_url(hurl[0]):
                    data.update({'url': hurl[0]})
    elif fpacked:
        fpdata = Unpack(fpacked.group(1))
        if fpdata:
            rurl = Regex(r'[\"\'\\]*?file[\"\'\\]*?\s*?\,\s*?[\"\'\\]*?(http[^\"\'\\]+(?<!m3u8|smil))[\"\'\\]*?').search(fpdata)
            if rurl:
                data.update({'url': rurl.group(1)})
            rthumb = Regex(r'[\"\'\\]*?image[\"\'\\]*?\s*?\,\s*?[\"\'\\]*?(http[^\"\'\\]+)[\"\'\\]*?').search(fpdata)
            if rthumb:
                data.update({'thumb': rthumb.group(1)})
            rduration = Regex(r'[\"\'\\]*?duration[\"\'\\]*?\s*?\,\s*?[\"\'\\]*?(\d+)[\"\'\\]*?').search(fpdata)
            if rduration:
                data.update({'duration': rduration.group(1)})

    return data

####################################################################################################
def get_embed_url(url):
    r = Regex(r'(?i)(https?:\/\/(?:www\.)?\w+\.\w+\/)([a-z0-9]+)').search(url)
    return r.group(1) + 'embed-' + r.group(2) + '.html'

####################################################################################################
def check_url(url):
    try:
        req = urllib2.Request(url, headers=HTTP_HEADERS)
        req.get_method = lambda : 'HEAD'
        try:
            with contextlib.closing(urllib2.urlopen(req)) as resp:
                return True if 'html' not in resp.headers['Content-Type'] else False
        except urllib2.HTTPError, e:
            Log.Error('* check_url: %s' %str(e))
    except Exception as er:
        Log.Error('* check_url: %s' %str(er))
    return False
