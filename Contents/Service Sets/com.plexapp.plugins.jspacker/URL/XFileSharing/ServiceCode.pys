#!/usr/bin/env python

"""
Service Code for:
    aisfile.com, weebvid.moe, putvid.com
"""

from unpacker import unpack as Unpack

#USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):

    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)(\w+)').search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url).content
        html = HTML.ElementFromString(page)
    except Exception as e:
        Log(str(e))
        raise Ex.MediaNotAvailable

    title = html.xpath('//span[@class="dfilename"]/text()')
    if not title:
        title = html.xpath('//input[@name="fname"]/@value')
        if not title:
            raise Ex.MediaExpired

    packed = get_packed_data(page)
    packed = packed if packed else get_packed_data(HTTP.Request(get_embed_url(url)).content)
    page = Unpack(packed.group(1)) if packed else page

    rt = Regex(r'[\"\']?image[\"\']?\s*?\:\s*?[\"\']([^\"\']+)[\"\']').search(page)
    rd = Regex(r'[\"\']?duration[\"\']?\s*?\:\s*?[\"\'](\d+)[\"\']').search(page)
    st = Regex(r'https?\:\/\/(?:www\.)?(\w+)\.\w+').search(url)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1) if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        duration=duration,
        source_title=st.group(1).title() if st else 'XFileSharing'
        )

####################################################################################################
def MediaObjectsForURL(url):

    if Regex(r'(?:\.|\/)(aisfile)\.').search(url):
        return [
            MediaObject(
                container=Container.MP4,
                video_codec=VideoCodec.H264,
                audio_codec=AudioCodec.AAC,
                video_resolution='sd',
                audio_channels=2,
                optimized_for_streaming=True,
                parts=[
                    PartObject(key=Callback(PlayVideo, url=url))
                    ]
                )
            ]
    else:
        return [
            MediaObject(
                video_resolution='sd',
                audio_channels=2,
                optimized_for_streaming=False,
                parts=[
                    PartObject(key=Callback(PlayVideo, url=url))
                    ]
                )
            ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    packed = get_packed_data(page)
    packed = packed if packed else get_packed_data(HTTP.Request(get_embed_url(url)).content)
    page = Unpack(packed.group(1)) if packed else page

    r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']').search(page)
    vurl = r.group(1).replace(' ', '%20') if r else None

    if vurl:
        Log.Debug('* PlayVideo URL = \"%s\"' %vurl)
        return IndirectResponse(VideoClipObject, key=vurl)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_packed_data(page):
    return Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:\|file\|).+\.split\('\|'\)\)\))").search(page)

####################################################################################################
def get_embed_url(url):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)(\w+)').search(url)
    return r.group(1) + 'embed-' + r.group(2) + '.html' if r else url
