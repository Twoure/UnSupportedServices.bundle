#!/usr/bin/env python

"""UsersCloud.com Service Code"""

from unpacker import unpack as Unpack

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/').split('-')[0]
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    data = get_data(page)
    if not data:
        raise Ex.MediaExpired
    elif 'url' in data.keys():
        if not data['url']:
            raise Ex.MediaExpired

    source_title = 'UsersCloud'
    fallback = 'http://i.imgur.com/75YO83o.jpg'

    if 'title' not in data.keys():
        rt = Regex(r'[Tt]itle\>([^\<]+)\<\/[Tt]itle').search(page)
        title = Regex(r'^[Dd]ownload\s(.+)$').sub(r'\1', rt.group(1).strip()) if rt else source_title
    else:
        title = data['title']

    duration = data['duration'] if 'duration' in data.keys() else None

    return VideoClipObject(
        title=title.strip(),
        thumb=Resource.ContentsOfURLWithFallback([data['thumb'], fallback]),
        duration=duration,
        source_title=source_title
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page = HTTP.Request(url).content
    data = get_data(page)
    if data and 'url' in data.keys():
        if data['url'] is not None:
            Log.Debug('* PlayVideo ULR = %s' %data['url'])
            return IndirectResponse(VideoClipObject, key=data['url'])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_data(page):
    fallback = 'http://i.imgur.com/75YO83o.jpg'
    source_title = 'UsersCloud'

    r1 = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(page)
    r2 = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:src).+\.split\('\|'\)\)\))").search(page)

    if r1:
        data = Unpack(r1.group(1))
        if data:
            rt = Regex(r'[\'\"]?title[\'\"]?\s*?\:\s*?[\'\"\\]+(.+?)[\'\"\\]+').search(data)
            rth = Regex(r'[\'\"]?image[\'\"]?\s*?\:\s*?[\'\"](http[^\'\"]+)[\'\"]').search(data)
            rd = Regex(r'[\'\"]?duration[\'\"]?\s*?\:\s*?[\'\"](\d+)[\'\"]').search(data)
            ru = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\'\?]+(?<!m3u8|smil))[\"\']').search(data)

            thumb = rth.group(1) if rth else fallback
            title = rt.group(1) if rt else source_title
            duration = int(rd.group(1)) * 1000 if rd else None

            return {'title': title, 'thumb': thumb, 'duration': duration, 'url': ru.group(1)}
    elif r2:
        data = Unpack(r2.group(1))
        if data:
            rhtml = Regex(r'document\.write\(\\\'([^\\\']+)').search(data)
            if rhtml:
                html = HTML.ElementFromString(rhtml.group(1))
                hurl = html.xpath('//param[@name="src"]/@value')
                hth = html.xpath('//param[@name="previewImage"]/@value')

                thumb = hth[0] if hth else fallback
                vurl = hurl[0] if hurl else None

                return {'thumb': thumb, 'url': vurl}

    return False
