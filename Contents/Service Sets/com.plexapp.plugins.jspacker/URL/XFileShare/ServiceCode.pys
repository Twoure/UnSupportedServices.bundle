#!/usr/bin/env python

"""
Service Code for:
    AllMyVideos, FileHoot, GorillaVid, MovPod, PowerWatch,
    Rapidvideo, Streamin, StreamPlay, TheVideoBee, Vidtodo,
    VidPlay, VoDLocker, ZStream

Decided to sepearte out Vidto, because it host multiple resolutions

DaClips is now behind cloudflare anti scrape bot
"""

from unpacker import unpack as Unpack

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):

    r = get_embed_url(url, norm=True)
    return r.group(1) + r.group(2)

####################################################################################################
def MetadataObjectForURL(url):

    try:
        url = correct_url(url)
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    tpage = HTTP.Request(get_embed_url(url)).content
    packed = get_packed_data(tpage)
    if packed:
        tpage = Unpack(packed.group(1))

    rt = Regex(r'(?:\"|\')?image(?:\"|\')?\:(?:\s)?(?:\"|\')([^\"\']+)(?:\"|\')').search(tpage)
    rd = Regex(r'(?:\"|\')?duration(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(\d+)(?:\"|\')').search(tpage)
    thumb = 'http://i.imgur.com/75YO83o.jpg'
    duration = None
    if rt:
        thumb = rt.group(1)
    if rd:
        duration = int(rd.group(1)) * 1000

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, 'http://i.imgur.com/75YO83o.jpg']),
        duration=duration,
        source_title=get_source_title(url)
        )

####################################################################################################
def MediaObjectsForURL(url):

    if Regex(r'(?:\.|\/)(vodlocker|gorillavid)\.').search(url):
        return [
            MediaObject(
                container=Container.MP4,
                video_codec=VideoCodec.H264,
                video_resolution='sd',
                audio_codec=AudioCodec.AAC,
                audio_channels=2,
                optimized_for_streaming=True,
                parts=[
                    PartObject(key=Callback(PlayVideo, url=url))
                    ]
                )
            ]
    else:
        return [
            MediaObject(
                video_resolution='sd',
                audio_channels=2,
                optimized_for_streaming=False,
                parts=[
                    PartObject(key=Callback(PlayVideo, url=url))
                    ]
                )
            ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    url = get_embed_url(correct_url(url))
    page = HTTP.Request(url, headers=HTTP_HEADERS).content
    packed = get_packed_data(page)
    if packed:
        page = Unpack(packed.group(1))

    r = Regex(r'(?:\"|\')?file(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(http[^\"\']+(?<!m3u8|smil))(?:\"|\')').search(page)

    if r:
        vurl = r.group(1) + '&direct=false&ua=true' if 'allmyvideos' in url else r.group(1)
        Log.Debug('* PlayVideo URL = \"%s\"' %vurl)
        return IndirectResponse(VideoClipObject, key=vurl, http_headers=HTTP_HEADERS)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_packed_data(page):
    return Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(page)

####################################################################################################
def get_embed_url(url, norm=False):
    r = Regex(r'(.*?https?\:\/\/(?:www\.)?\w+\.(?:[^/]+\/)?)(?:.*?[/])?([^\/\.]+)').search(url)
    if norm:
        return r
    else:
        return r.group(1) + 'embed-' + r.group(2) + '.html'

####################################################################################################
def correct_url(url):
    url_list = ['vodlocker', 'gorillavid']
    test = [url[4:] for u in url_list if Regex(r'(?:\.|\/)(%s)\.' %u).search(url)]
    return test[0] if test else url

####################################################################################################
def get_source_title(url):
    """get source title from url"""

    stitle = url.split('/')[2]
    sltitle = stitle.split('.')
    if len(sltitle) > 2:
        return sltitle[1].title()+'.'+sltitle[2]
    else:
        return sltitle[0].title()+'.'+sltitle[1]
