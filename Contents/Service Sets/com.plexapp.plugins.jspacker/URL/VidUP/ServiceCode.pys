#!/usr/bin/env python

"""VidUP.me Service Code"""

from unpacker import unpack as Unpack

####################################################################################################
def NormalizeURL(url):

    if '/embed-' not in url:
        r = Regex(r'(?i)(https?:\/\/(?:beta\.|www\.)?\w+\.\w+\/)(\w+)').search(url)
        url = r.group(1) + 'embed-' + r.group(2) + '.html' if r else url
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    rt = Regex(r'title\s*?\:\s*?\'(.+)\'').search(page)
    if not rt:
        raise Ex.MediaExpired
    title = rt.group(1)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    rth = Regex(r'image\s*?\:\s*?[\'\"](http[^\'\"]+)[\'\"]').search(page)
    thumb = rth.group(1) if rth else fallback

    rs = Regex(r'description\s*?\:\s*?\'(.+)\'').search(page)
    summary = rs.group(1) if rs else None

    rd = Regex(r'duration\s*?\:\s*?[\'\"](\d+)[\'\"]').search(page)
    duraiton = int(rd.group(1))*1000 if rd else None

    return VideoClipObject(
        title=title,
        summary=summary,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='VidUP'
        )

####################################################################################################
def MediaObjectsForURL(url):

    mo = []
    fmt_list = source_dict(url)
    for item in reversed(sorted(fmt_list, key=lambda k: k['label'])):
        mo.append(MediaObject(
            video_resolution=item['label'][:-1],
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[PartObject(key=Callback(PlayVideo, url=url, label=item['label']))]
            ))

    if len(mo) != 0:
        return mo

    raise Ex.MediaNotAvailable

####################################################################################################
@indirect
def PlayVideo(url, label, **kwargs):

    fmt_list = source_dict(url)
    for item in fmt_list:
        if label == item['label']:
            Log.Debug("* PlayVideo URL  = {}".format(item['file']))
            return IndirectResponse(VideoClipObject, key=item['file'])

    raise Ex.MediaNotAvailable

####################################################################################################
def source_dict(url):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    data = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:\|file\|).+\.split\('\|'\)\)\))").search(page)
    if data:
        data = Unpack(data.group(1))
        page = data.replace('\\', '')

    sources = Regex(r'sources\s*?\:\s*?(\[\{.+\}\])\,').search(page)
    if not sources:
        raise Ex.MediaExpired

    s = sources.group(1)
    s = s.replace('\'', '\"').replace('label', '\"label\"').replace('file', '\"file\"')

    return JSON.ObjectFromString(s)
