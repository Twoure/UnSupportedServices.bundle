#!/usr/bin/env python

"""VidBull.com Service Code"""

from unpacker import unpack as Unpack
from crypto.cipher.aes  import AES
from crypto.cipher.base import noPadding
from binascii import a2b_hex

####################################################################################################
def NormalizeURL(url):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)([A-Za-z0-9]+)').search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//h3/text()')
    if title:
        title = Regex(r'(?s)[Vv]erifying\s*?[Vv]ideo\s*?[Rr]equest\s*?\-(.+?)$').sub(r'\1', title[0].strip()) if 'verifying video request' in title[0].lower() else title[0]
    else:
        title = html.xpath('//title/text()')
        if title:
            title = Regex(r'[Ww]atch\s+?(.+?)(?:(?:[Oo]nline)?\s+?\-\s+?[Vv]id[Bb]ull$|$)').sub(r'\1', title[0].strip()) if 'watch ' in title[0].lower() else title[0]
        else:
            raise Ex.MediaExpired


    page = HTTP.Request(get_embed_url(url)).content
    packed = get_packed_data(page)
    if packed:
        page = Unpack(packed.group(1))

    rt = Regex(r'[\'\"]?image[\'\"]?\s*?\:\s*?[\"\'](http[^\"\']+)[\"\']').search(page)
    rd = Regex(r'[\'\"]?duration[\'\"]?\s*?\:\s*?[\"\'](\d+)[\"\']').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1) if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title.strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        duration=duration,
        source_title='VidBull'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page = HTTP.Request(get_embed_url(url)).content
    packed = get_packed_data(page)
    if packed:
        page = Unpack(packed.group(1))

    r = Regex(r'[\'\"]?file[\'\"]?\s*?\:\s*?[\"\']([^\"\']+)[\"\']').search(page)
    if r:
        vurl = vidbull_decrypt(r.group(1))
        if vurl:
            Log.Debug('* PlayVideo URL = \"%s\"' %vurl)
            return IndirectResponse(VideoClipObject, key=vurl)
        else:
            Log.Error('* VidBull Decryption Error')

    raise Ex.MediaNotAvailable

####################################################################################################
def get_packed_data(page):
    return Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file|src).+\.split\('\|'\)\)\))").search(page)

####################################################################################################
def get_embed_url(url):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)([A-Za-z0-9]+)').search(url)
    return r.group(1) + 'embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def ensure_unicode(v):
    if isinstance(v, str):
        v = v.decode('utf8')
    return unicode(v)

####################################################################################################
def vidbull_decrypt(f):
    key = "YTk0OTM3NmUzN2IzNjlmMTdiYzdkM2M3YTA0YzU3MjE="
    bkey, etb = a2b_hex(String.Base64Decode(key)), a2b_hex(f)
    kSize = len(bkey)
    alg = AES(bkey, keySize=kSize, padding=noPadding())
    url = alg.decrypt(etb).split('\x00')[0]
    if url.startswith('http'):
        return ensure_unicode(url)
    return False
