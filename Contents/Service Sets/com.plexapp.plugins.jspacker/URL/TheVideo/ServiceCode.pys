#!/usr/bin/env python

"""TheVideo.me Service Code"""

from unpacker import unpack as Unpack

USER_AGENT = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"

####################################################################################################
def NormalizeURL(url):

    if '/embed-' not in url:
        r = Regex(r'(?i)(https?:\/\/(?:www\.)?\w+\.\w+\/)([a-z0-9]+)').search(url)
        url = r.group(1) + 'embed-' + r.group(2) + '.html' if r else url

    return url

####################################################################################################
def MetadataObjectForURL(url):

    page = HTTP.Request(url, cacheTime=10).content
    title = Regex(r'title\s*?\:\s*?[\'\"](.*?)[\'\"]\,').search(page)
    if not title:
        raise Ex.MediaExpired

    rt = Regex(r'image\s*?\:\s*?[\'\"]([^\'\"]+)[\'\"]').search(page)
    rd = Regex(r'duration\s*?\:\s*?[\'\"](\d+)[\'\"]').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1).strip('\'\" ') if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title.group(1).strip('\'\" '),
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='TheVideo'
        )

####################################################################################################
def MediaObjectsForURL(url):

    mo = list()
    fmt_list = source_dict(url, {'User-Agent': USER_AGENT})
    for item in reversed(Util.ListSortedByKey(fmt_list, 'label')):
        mo.append(MediaObject(
            video_resolution=item['label'][:-1],
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[PartObject(key=Callback(PlayVideo, url=url, label=item['label']))]
            ))

    if len(mo) != 0:
        return mo

    raise Ex.MediaNotAvailable

####################################################################################################
@indirect
def PlayVideo(url, label, **kwargs):

    http_headers = {'User-Agent': USER_AGENT}
    fmt_list = source_dict(url, http_headers)
    for item in fmt_list:
        if label == item['label']:
            vurl = item['file']
            Log.Debug('* PlayVideo URL  = {}'.format(vurl))
            return IndirectResponse(VideoClipObject, key=vurl, http_headers=http_headers)

    raise Ex.MediaNotAvailable

####################################################################################################
def source_dict(url, http_headers):

    page = HTTP.Request(url, headers=http_headers, cacheTime=10).content
    rtkn = Regex(r'[\'\"]\/[\'\"]\+(.+)\+.+\\x3C\/script\>').search(page)
    rtoken = Regex(r'var\s*?{0}\=[\'\"]([^\'\"]+)[\'\"]'.format(rtkn.group(1))).search(page) if rtkn else None
    if not rtoken:
        Log.Error("* Error: Cannot find packer token")
        raise Ex.MediaNotAvailable

    http_headers.update({'Referer': url})
    try:
        packed = HTTP.Request('http://thevideo.me/jwv/{0}'.format(rtoken.group(1)), headers=http_headers, cacheTime=10).content.strip()
    except:
        Log.Exception("* Error handling packed URL >>>")
        raise Ex.MediaNotAvailable

    sources = Regex(r'sources:\s(.*),').search(page)
    rd = Regex(r'vt\=([^\'\"]+)[\'\"]').search(Unpack(packed))
    if not sources:
        raise Ex.MediaExpired
    elif not rd:
        raise Ex.MediaNotAvailable

    s = sources.group(1)
    s = s.replace('\'', '\"').replace('label', '\"label\"').replace('file', '\"file\"')

    data = JSON.ObjectFromString(s)
    [d.update({'file': d['file'] + '?direct=false&ua=1&vt={}'.format(rd.group(1))}) for d in data]
    return data
