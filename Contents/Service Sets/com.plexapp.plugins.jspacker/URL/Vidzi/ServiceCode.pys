#!/usr/bin/env python

"""Vidzi.tv Service Code"""

from unpacker import unpack as Unpack

HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/').split('-')[0]

    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        url = url[4:]
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    if len(html.xpath('//*[contains(., "deleted")]')) > 0:
        raise Ex.MediaNotAvailable

    title = html.xpath('//h2[@class="video-title"]/text()')

    if len(title) < 1:
        raise Ex.MediaNotAvailable

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    nthumb = html.xpath('//span[@id="vplayer"]/img/@src')
    thumb = nthumb[0] if nthumb else fallback

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='Vidzi'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page = HTTP.Request(url[4:], headers=HTTP_HEADERS).content
    packed = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(page)
    if packed:
        data = Unpack(packed.group(1))
        vurl = Regex(r'(?:\"|\')?file(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(http[^\"\'\?]+(?<!m3u8)(?<!smil)(?<!vtt))(?:\"|\')').search(data)
        if vurl:
            Log.Debug('* PlayVideo URL = %s' %vurl.group(1))
            return IndirectResponse(VideoClipObject, key=vurl.group(1), http_headers=HTTP_HEADERS)

    raise Ex.MediaNotAvailable
