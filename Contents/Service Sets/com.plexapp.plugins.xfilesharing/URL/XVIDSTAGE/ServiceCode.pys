#!/usr/bin/env python

"""xvidstage.com Service Code"""

from unpacker import unpack as Unpack

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_PACKED_SRC = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|src\|.+\.split\('\|'\).*?\)\))")
RE_PACKED_FILE = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_FILE = Regex(r'["\'\\]*?file["\'\\]*? *?(?:\,|\:) *?["\'\\]*?(http[^"\'\\]+(?<!m3u8|smil))["\'\\]*?')
RE_THUMB = Regex(r'["\'\\]*?image["\'\\]*? *?(?:\,|\:) *?["\'\\]*?(http[^"\'\\]+)["\'\\]*?')
RE_DUR = Regex(r'["\'\\]*?duration["\'\\]*? *?(?:\,|\:) *?["\'\\]*?(\d+)["\'\\]*?')
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    data = get_data(url)

    if 'title' not in data.keys():
        raise Ex.MediaExpired
    elif 'url' not in data.keys():
        raise Ex.MediaNotAvailable

    thumb = data['thumb'] if 'thumb' in data.keys() else FALLBACK
    duration = None
    if 'duration' in data.keys():
        try:
            duration = Datetime.MillisecondsFromString(data['duration'])
        except:
            Log.Exception(u"* Error: cannot parse video duration for '{0}' >>>".format(url))

    return VideoClipObject(
        title=data['title'],
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='XVIDSTAGE'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            container=Container.AVI,
            video_codec=VideoCodec.XVID,
            audio_codec=AudioCodec.MP3,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    data = get_data(url)
    if 'url' in data.keys():
        Log.Debug(u'* PlayVideo URL = {0}'.format(data['url']))
        return IndirectResponse(VideoClipObject, key=data['url'])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_data(url):
    values = dict()
    data = dict()

    try:
        html = HTML.ElementFromURL(url, headers={'User-Agent': USER_AGENT}, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    ht1 = html.xpath('//input[@name="fname"]/@value')
    if not ht1:
        return data

    for v in html.xpath('//form[@action=""]/input'):
        values[v.get('name')] = String.Quote(v.get('value'), True)

    try:
        page = HTTP.Request(url, headers={'User-Agent': USER_AGENT, 'Referer': url}, values=values, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot handle POST for '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    spacked = RE_PACKED_SRC.search(page)
    fpacked = RE_PACKED_FILE.search(page)

    if spacked:
        spage = Unpack(spacked.group(1))
        if spage:
            rhtml = Regex(r'document\.write\(\\\'([^\\\']+)').search(spage)
            if rhtml:
                Log("* XVIDSTAGE data within packed 'src'")
                html = HTML.ElementFromString(rhtml.group(1))
                hurl = html.xpath('//param[@name="src"]/@value')
                hthumb = html.xpath('//param[@name="previewImage"]/@value')
                if hthumb:
                    data['thumb'] = hthumb[0]
                if hurl and check_url(hurl[0]):
                    data['url'] = hurl[0]
    elif fpacked:
        fpage = Unpack(fpacked.group(1))
        if fpage:
            Log("* XVIDSTAGE data within packed 'file'")
            rurl = RE_FILE.search(fpage)
            if rurl:
                data['url'] = rurl.group(1)
            rthumb = RE_THUMB.search(fpage)
            if rthumb:
                data['thumb'] = rthumb.group(1)
            rduration = RE_DUR.search(fpage)
            if rduration:
                data['duration'] = rduration.group(1)

    ht2 = html.xpath('/title/text()')
    if ht2:
        data['title'] = Regex(r'^Download +?').sub('', ht2[0]).strip()
    else:
        vid = RE_NORM.search(url).group(2)
        rt1 = Regex(r'{0}["\']\>(.+?) *?\- *?\d+(?:\.\d+)? *?[MG]B\<\/'.format(vid)).search(page)
        rt2 = Regex(r'{0}\](.+?)\- *?\d+(?:\.\d+)? *?[MG]B'.format(vid)).search(page)
        if rt1:
            data['title'] = rt1.group(1).strip()
        elif rt2:
            data['title'] = rt2.group(1).strip()
        elif ht1:
            data['title'] = ht1[0].strip()

    return data

####################################################################################################
def check_url(url):
    """check video URLs for video content-type"""

    try:
        h = HTTP.Request(url, headers={'User-Agent': USER_AGENT}, method='HEAD', immediate=True, cacheTime=10).headers
        if 'content-type' in h:
            return 'html' not in h['content-type']
        elif 'Content-Type' in h:
            return 'html' not in h['Content-Type']
    except Ex.HTTPError, e:
        Log.Exception(u"* HTTP {0} Error while checking '{1}' >>>".format(e.code, url))
    except:
        Log.Exception(u"* Error while cheking '{0}' >>>".format(url))
    return False
