#!/usr/bin/env python

"""VideoNest.net Service Code"""

RE_FILE = Regex(r'["\']?file["\']? *?: *?["\'](http[^"\']+(?<!m3u8|smil))["\']')
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/(?:vid)?embed-|/)(\w+)')
RE_THUMB = Regex(r'["\']?image["\']? *?: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?: *?["\'](\d+)["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url)
    html = HTML.ElementFromString(page)

    title = html.xpath('//span[@class="dfilename"]/text()')
    if not title:
        raise Ex.MediaExpired

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    hdate = html.xpath('//div[@class="dfile"]/div[contains(text(), "Uploaded on")]')
    sdate = hdate[0].text_content().strip().split('Uploaded on')[1].split('by')[0].strip() if hdate else None
    oaa = None
    if sdate:
        try:
            oaa = Datetime.ParseDate(sdate)
        except:
            Log.Exception(u"* Error: cannot parse datetime for '{0}' >>>".format(url))

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        originally_available_at=oaa,
        year=int(oaa.year) if oaa else None,
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='VideoNest'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    r = RE_FILE.search(get_page(url))
    vurl = r.group(1).replace(' ', '%20') if r else None
    if vurl:
        Log.Debug(u"* PlayVideo URL = {0}".format(vurl))
        return IndirectResponse(VideoClipObject, key=vurl)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
