#!/usr/bin/env python

"""SaveFile.co Service Code"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\'\?]+(?<!m3u8|smil))["\']')
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromString(get_page(url))

    title = html.xpath('//tr/td/b[text()="Filename:"]/../../td/text()')
    if not title:
        raise Ex.MediaExpired

    duration = html.xpath('//tr/td/b[text()="Length:"]/../../td/text()')
    thumb = html.xpath('//tr/td/b[text()="Snapshot:"]/../a/@href')
    thumb = thumb[0] if thumb else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        duration=Datetime.MillisecondsFromString(duration[0]) if duration else None,
        source_title='SaveFile'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page = get_page(url)
    packed = RE_PACKED.search(page)
    page = Unpack(packed.group(1)) if packed else page

    r = RE_FILE.search(page)
    if r:
        Log.Debug(u"* PlayVideo URL = {0}".format(r.group(1).replace(' ', '%20')))
        return IndirectResponse(VideoClipObject, key=r.group(1).replace(' ', '%20'))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
