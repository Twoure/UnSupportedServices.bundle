#!/usr/bin/env python

"""
BDUpload.info Service Code
    :Can have ~5 sec POST wait time
"""

from time import sleep

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_CTITLE = Regex(r'[Dd]ownload\s(.+)$')

####################################################################################################
def MetadataObjectForURL(url):

    html = get_html(url, {'User-Agent': USER_AGENT})

    title = html.xpath('//h1/text()')
    if not title:
        title = html.xpath('//span[@class="dfilename"]/text()')
        if not title:
            raise Ex.MediaExpired

    title = RE_CTITLE.sub(r'\1', title[0].strip()) if 'download' in title[0].lower() else title[0].strip()

    return VideoClipObject(
        title=title,
        thumb='http://i.imgur.com/75YO83o.jpg',
        source_title='BDUpload'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agent': USER_AGENT}
    html1 = get_html(url, http_headers)

    wait_time = html1.xpath('//span[contains(@id, "countdown")]/span/text()')
    if wait_time:
        Log(u"* POST Wait time = {0}".format(wait_time[0].strip()))
        sleep(int(wait_time[0].strip()))

    data = dict()
    for item in html1.xpath('//input'):
        data[item.get('name')] = item.get('value')

    try:
        html2 = HTML.ElementFromString(HTTP.Request(url, headers=http_headers, values=data).content)
    except:
        Log.Exception(u"* Error: Cannot handle '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    if (len(html2) is not None):
        vurl = html2.xpath('//h1[contains(text(), "Download Link Generated")]/..//a/@href')
        if not vurl:
            vurl = html2.xpath('//h2[contains(text(), "Download Link Generated")]/..//a/@href')

        if vurl:
            playurl = vurl[0].replace(' ', '%20')
            Log.Debug(u"* PlayVideo URL = {0}".format(playurl))
            return IndirectResponse(VideoClipObject, key=playurl)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_html(url, http_headers):
    try:
        html = HTML.ElementFromURL(url, headers=http_headers, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return html
