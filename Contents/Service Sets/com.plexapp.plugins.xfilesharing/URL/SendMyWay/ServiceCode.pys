#!/usr/bin/env python

"""SendMyWay.com Service Code"""

from unpacker import unpack as Unpack

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_PACKED_FILE = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_PACKED_SRC = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|src\|.+\.split\('\|'\).*?\)\))")
RE_TITLE = Regex(r'["\']?title["\']? *?\: *?["\'\\]+(.+?)["\'\\]+')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\'\?]+(?<!m3u8|smil))["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'
STITLE = 'SendMyWay'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    data = get_data(get_page(url), url)
    if not data:
        raise Ex.MediaExpired
    elif ('url' in data.keys()) and (not data['url']):
        raise Ex.MediaExpired

    if 'title' not in data.keys():
        nurl = url.replace('/embed-', '/')
        fallback_title = get_fallback_title(nurl)
        try:
            html = HTML.ElementFromURL(nurl, cacheTime=10)
            title = html.xpath('//span[@class="filename"]/text()')
            title = title[0] if title else fallback_title
        except:
            title = fallback_title
            Log.Exception(u"* Error: Cannot handle '{0}' >>>".format(nurl))
    else:
        title = data['title']

    return VideoClipObject(
        title=title.strip(),
        thumb=Resource.ContentsOfURLWithFallback([data['thumb'], FALLBACK]),
        duration=data['duration'] if 'duration' in data.keys() else None,
        source_title=STITLE
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    data = get_data(get_page(url), url)
    if data and ('url' in data.keys()) and (data['url'] is not None):
        Log.Debug(u"* PlayVideo URL = {0}".format(data['url']))
        return IndirectResponse(VideoClipObject, key=data['url'])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def get_fallback_title(url):
    return u"{0} | {1}".format(STITLE, url.rsplit('/', 1)[1].split('.')[0])

####################################################################################################
def get_data(page, url):
    r1 = RE_PACKED_FILE.search(page)
    r2 = RE_PACKED_SRC.search(page)

    if r1:
        data = Unpack(r1.group(1))
        if data:
            rt = RE_TITLE.search(data)
            rth = RE_THUMB.search(data)
            rd = RE_DUR.search(data)
            ru = RE_FILE.search(data)

            thumb = rth.group(1) if rth else FALLBACK
            title = rt.group(1) if rt else get_fallback_title(url)
            duration = int(rd.group(1)) * 1000 if rd else None
            vurl = ru.group(1) if ru else None

            return {'title': title, 'thumb': thumb, 'duration': duration, 'url': vurl}
    elif r2:
        data = Unpack(r2.group(1))
        if data:
            rhtml = Regex(r'document\.write\(\\\'([^\\\']+)').search(data)
            if rhtml:
                html = HTML.ElementFromString(rhtml.group(1))
                hurl = html.xpath('//param[@name="src"]/@value')
                hth = html.xpath('//param[@name="previewImage"]/@value')

                thumb = hth[0] if hth else FALLBACK
                vurl = hurl[0] if hurl else None

                return {'thumb': thumb, 'url': vurl}

    return False
