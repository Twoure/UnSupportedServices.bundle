#!/usr/bin/env python

"""GamoVideo.com Service Code"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/external/|/embed\-|/flash\-|/)(\w+)')
RE_RTMP = Regex(r'["\']?file["\']? *?\: *?["\'](rtmp[^"\']+(?<!m3u8|smil))["\']')
RE_RTMP_SPLIT = Regex(r'(.+?/)(mp4\:.+)')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromString(get_page(url))

    title = html.xpath('//td[@id="file_title"]/text()')
    if title:
        title = title[0].strip()
    elif html.xpath('//title/text()'):
        title = html.xpath('//title/text()')[0]
        title = Regex(r'Watch\s(.+)$').sub(r'\1', title.group(1))
    else:
        raise Ex.MediaExpired

    thumb = html.xpath('//span[@id="vplayer"]/img/@src')
    thumb = thumb[0] if thumb else FALLBACK

    return VideoClipObject(
        title=title,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='GamoVideo'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    r = RE_RTMP.search(get_page(url))
    node = RE_RTMP_SPLIT.search(r.group(1)) if r else None
    player = node.group(1) if node else None
    clip = node.group(2) if node else None

    if player and clip:
        Log.Debug('* PlayVideo RTMP Stream')
        Log.Debug(u"* player = {0} | clip = {1}".format(player, clip))
        return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=clip))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
