#!/usr/bin/env python

"""
HDViD.tv Service Code
    :Pull all info from embed page
"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_TITLE = Regex(r'["\']?title["\']? *?\: *?["\']([^"\']+)["\']')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_SOURCES = Regex(r'(?s)sources *?\: *?(\[.*?\{[^\]]+\}.*?\]),')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url)
    if not RE_SOURCES.search(page):
        Log.Warn(u"* Warning: File missing for '{0}'".format(url))
        raise Ex.MediaExpired

    rt = RE_TITLE.search(page)
    rth = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rth.group(1) if rth else FALLBACK
    title = rt.group(1).strip() if rt else None
    if not title:
        nurl = url.replace('/embed-', '/') if '/embed-' in url else url
        html = HTML.ElementFromString(get_page(nurl))
        title = html.xpath('//h2/text()')
        if not title:
            raise Ex.MediaExpired
        title = title[0].strip()

    return VideoClipObject(
        title=title,
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='HDViD'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    r = RE_SOURCES.search(get_page(url))
    if not r:
        raise Ex.MediaNotAvailable

    s = r.group(1).replace("'", '"')
    if '"file"' not in s:
        s = s.replace('file', '"file"')
    if '"label"' not in s:
        s = s.replace('label', '"label"')

    sources = JSON.ObjectFromString(s)
    [s.update({'label': int(s['label'])}) for s in sources]
    Log(u"* HDViD Video Sources = '{0}'".format(sources))

    return [
        MediaObject(
            audio_channels=2,
            video_resolution=str(item['label']),
            optimized_for_streaming=False,
            parts=[
                PartObject(key=item['file'])
                ]
            ) for item in reversed(Util.ListSortedByKey(sources, 'label'))
        ]

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot access '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
