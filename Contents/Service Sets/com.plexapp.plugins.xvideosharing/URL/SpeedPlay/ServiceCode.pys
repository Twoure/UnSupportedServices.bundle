#!/usr/bin/env python

"""
Service Code for:
    SpeedPlay(1|2).(site|pw), SpeedPlay3.pw, SpeedPlay.us,
"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_FNF = Regex(r'([Ff]ile [Nn]ot [Ff]ound)')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_SOURCES = Regex(r'(?s)["\']?sources["\']? *?\: *?(\[.*?\{[^\]]+\}.*?\])\,')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    page = get_page(nurl)
    if RE_FNF.search(page):
        raise Ex.MediaExpired

    html = HTML.ElementFromString(page)
    t1 = html.xpath('//input[@id="fname"]/@value')
    t2 = html.xpath('//h2/text()')
    t3 = html.xpath('//title/text()')
    if t1:
        title = t1[0].strip()
    elif t2:
        title = Regex(r'Watch\s(.+)$').sub(r'\1', t2[0].strip())
    elif t3:
        title = t3[0].strip()
    else:
        raise Ex.MediaExpired

    page = get_page(url)
    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title,
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='SpeedPlay'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    rs = RE_SOURCES.search(get_page(url))
    if not rs:
        raise Ex.MediaNotAvailable

    s = rs.group(1).replace("'", '"')
    if '"file"' not in s:
        s = s.replace('file', '"file"')
    if '"label"' not in s:
        s = s.replace('label', '"label"')

    sources = JSON.ObjectFromString(s)
    sources = [{'label': int(s['label']), 'file': s['file']} for s in sources]
    Log(u"* SpeedPlay Video Sources: '{0}'".format(sources))

    return [
        MediaObject(
            audio_channels=2,
            video_resolution=str(item['label']),
            optimized_for_streaming=False,
            parts=[
                PartObject(key=item['file'])
                ],
            ) for item in reversed(Util.ListSortedByKey(sources, 'label'))
        ]

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
