#!/usr/bin/env python

"""
PlayU.me Service Code
    host is slow, may not be good for Plex streaming
"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\']+(?<!m3u8|smil))["\']')
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_TITLE = Regex(r'["\']?title["\']? *?\: *?["\']([^"\']+)["\']')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    html = HTML.ElementFromString(get_page(nurl))

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        Log.Warn(u"* Warning: File missing for '{0}'".format(url))
        raise Ex.MediaExpired

    data = get_data(url)
    if not data['url']:
        Log.Warn(u"* Cannot find Video Stream for '{0}'".format(url))
        raise Ex.MediaExpired

    return VideoClipObject(
        title=title[0].strip(),
        duration=data['duration'],
        thumb=Resource.ContentsOfURLWithFallback([data['thumb'], FALLBACK]),
        source_title='PlayU'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    data = get_data(url)
    if not data['url']:
        raise Ex.MediaExpired

    Log.Debug(u"* PlayVideo URL = {0}".format(data['url']))
    return IndirectResponse(VideoClipObject, key=data['url'])

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot access '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def get_data(url):

    page = get_page(url)
    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)
    rf = RE_FILE.search(page)

    return {
        'thumb': rt.group(1) if rt else FALLBACK,
        'duration': int(rd.group(1)) * 1000 if rd else None,
        'url': rf.group(1) if rf else None
        }
