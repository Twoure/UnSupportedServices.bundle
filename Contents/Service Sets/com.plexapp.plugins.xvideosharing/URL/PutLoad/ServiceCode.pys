#!/usr/bin/env python

"""
Service Code for:
    PutLoad.tv,
    ShitMoive.com,
    YouLol.(me|pw), YouLol1.pw, YouLol2.site
"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_FNF = Regex(r'([Ff]ile [Nn]ot [Ff]ound)')
RE_TITLE = Regex(r'\[/IMG\] *?(\]?[^\[]+)\[/URL\]')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url)
    if RE_FNF.search(page):
        raise Ex.MediaExpired

    html = HTML.ElementFromString(page)

    title = None
    t1 = html.xpath('//h2[@style]/text()')
    if t1:
        title = t1[0].strip()
    if not title:
        t2 = RE_TITLE.search(page)
        t3 = html.xpath('//title/text()')
        if t2:
            title = t2.group(1).strip()
        elif t3:
            title = Regex(r'Watch\s(.+)$').sub(r'\1', t3[0].strip())

    if not title:
        raise Ex.MediaExpired

    ht = html.xpath('//video/@poster')
    thumb = ht[0] if ht else FALLBACK

    return VideoClipObject(
        title=title,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='PutLoad'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    html = HTML.ElementFromString(get_page(url))
    src = html.xpath('//video/source/@src')
    if src:
        Log.Debug(u"* PlayVideo URL = {0}".format(src[0]))
        return IndirectResponse(VideoClipObject, key=src[0])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
