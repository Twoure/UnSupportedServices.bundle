#!/usr/bin/env python

"""
Service Code for:
    MyStream.la,
    SpeedPlay(1|2).(site|pw), SpeedPlay3.pw, SpeedPlay.(us|me),
    YouLol.(me|pw), YouLol1.pw, YouLol2.site, ShitMoive.com,
    FastPlay.(cc|sx)
"""

####################################################################################################
def NormalizeURL(url):

    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/external\/|\/embed\-|\/flash\-|\/)(\w+)').search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    if Regex(r'([Ff]ile\s[Nn]ot\s[Ff]ound)').search(page):
        raise Ex.MediaExpired

    title = Regex(r'\<title\>([^\<]+)\<\/title\>').search(page)
    if title:
        title= Regex(r'Watch\s(.+)$').sub(r'\1', title.group(1))
    else:
        title = Regex(r'\[\/IMG\]\s*?(\]?[^\[]+)\[\/URL\]').search(page)
        if title:
            title = title.group(1).strip('_-\s\r\n\t')
        else:
            raise Ex.MediaExpired

    rt = Regex(r'[\'\"]?image[\'\"]?\s*?\:\s*?[\'\"](http[^\'\"]+)[\'\"]').search(page)
    rd = Regex(r'[\'\"]?duration[\'\"]?\s*?\:\s*?[\'\"](\d+)[\'\"]').search(page)
    st = Regex(r'https?\:\/\/(?:www\.)?(\w+)\.\w+').search(url)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1) if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title=st.group(1).title() if st else 'MyStream'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\'\?]+(?<!m3u8|smil))[\"\']').search(page)
    if r:
        Log.Debug(u"* PlayVideo URL = {0}".format(r.group(1)))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    raise Ex.MediaNotAvailable
