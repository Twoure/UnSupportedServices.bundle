#!/usr/bin/env python

"""
Service Code for:
    MyStream.la,
    FastPlay.(cc|sx)
"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/external/|/embed\-|/flash\-|/)(\w+)')
RE_FNF = Regex(r'([Ff]ile [Nn]ot [Ff]ound)')
RE_TITLE = Regex(r'\<title\>([^\<]+)\</title\>')
RE_TITLE2 = Regex(r'\[/IMG\] *?(\]?[^\[]+)\[/URL\]')
RE_TITLE3 = Regex(r'title *?\: *?"(.+?)"')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_STITLE = Regex(r'https?://(?:www\.)?(\w+)\.\w+')
RE_SOURCES = Regex(r'(?s)["\']?sources["\']? *?\: *?(\[.*?\{[^\]]+\}.*?\])\,')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    if r and ('mystream' in r.group(1)):
        return r.group(1) + '/embed-' + r.group(2) + '.html'
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url)
    if RE_FNF.search(page):
        raise Ex.MediaExpired

    t1 = RE_TITLE.search(page)
    t2 = RE_TITLE2.search(page)
    t3 = RE_TITLE3.search(page)
    if t1:
        title = Regex(r'Watch\s(.+)$').sub(r'\1', t1.group(1))
    elif t2:
        title = t2.group(1).strip('_-\s\r\n\t')
    elif t3:
        title = t3.group(1).strip()
    else:
        raise Ex.MediaExpired

    page = get_packed_page(page)
    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title,
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title=get_source_title(url)
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    rs = RE_SOURCES.search(get_packed_page(get_page(url)))
    if not rs:
        raise Ex.MediaNotAvailable

    s = rs.group(1).replace("'", '"')
    if '"file"' not in s:
        s = s.replace('file', '"file"')
    if '"label"' not in s:
        s = s.replace('label', '"label"')
    if '"default"' not in s:
        s = s.replace('default', '"default"')

    sources = JSON.ObjectFromString(s)
    for src in sources:
        if src['label'].endswith('p'):
            src['label'] = int(src['label'][:-1])
        else:
            src['label'] = int(src['label'])

    Log(u"* {0} Video Sources: '{1}'".format(get_source_title(url), sources))

    return [
        MediaObject(
            audio_channels=2,
            video_resolution=str(item['label']),
            optimized_for_streaming=False,
            parts=[
                PartObject(key=item['file'])
                ],
            ) for item in reversed(Util.ListSortedByKey(sources, 'label'))
        ]

####################################################################################################
def get_source_title(url):
    st = RE_STITLE.search(url)
    return st.group(1).title() if st else 'MyStream'

####################################################################################################
def get_packed_page(page):
    r = RE_PACKED.search(page)
    return Unpack(r.group(1)) if r else page

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
