#!/usr/bin/env python

"""
VideoHost.site Service Code
    :Pull all info from /play/ page.
"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"(?:<script type=.text/javascript.>|^)(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_JCODE = Regex(r'JuicyCodes\.Run\(([^\)\;]+)')
RE_BCODE = Regex(r'["\']([^"\']+)["\']')
RE_SOURCES = Regex(r'(?s)sources *?\: *?(\[.*?\{[^\]]+\}.*?\]),')
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/play/|/)(\w+)')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/play/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromString(get_page(url))
    title = html.xpath('//title/text()')
    title = title[0] if title else None

    if (title == "Video Host"):
        raise Ex.MediaExpired

    thumb = html.xpath('//meta[@property="og:image"]/@content')
    thumb = thumb[0] if thumb else FALLBACK

    return VideoClipObject(
        title=title,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='VideoHost'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    page = get_page(url)
    jstring = RE_JCODE.search(page)
    if jstring:
        page = String.Base64Decode(''.join(RE_BCODE.findall(jstring.group(1))))
    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    rs = RE_SOURCES.search(page)
    if not rs:
        raise Ex.MediaNotAvailable

    s = rs.group(1).replace("'", '"')
    if '"file"' not in s:
        s = s.replace('file', '"file"')
    if '"label"' not in s:
        s = s.replace('label', '"label"')

    s = JSON.ObjectFromString(s)
    Log(s)
    sources = list()
    for src in s:
        if 'label' not in src.keys():
            continue
        elif 'file' not in src.keys():
            continue
        elif src['label'] == 'NA':
            src['label'] = 360
        elif str(src['label']).lower().endswith('p'):
            src['label'] = int(src['label'][:-1])
        elif (str(src['label']).lower() == 'original'):
            src['label'] = None
        else:
            src['label'] = int(src['label'])
        sources.append(src)

    Log(u"* VideoHost Video Sources: '{}'".format(sources))

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            video_resolution=str(item['label']),
            parts=[
                PartObject(key=item['file'])
                ]
            ) for item in reversed(Util.ListSortedByKey(sources, 'label'))
        ]

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot access '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
