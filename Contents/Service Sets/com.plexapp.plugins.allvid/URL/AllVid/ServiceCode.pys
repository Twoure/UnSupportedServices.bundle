#!/usr/bin/env python

"""AllVid.ch & coo5shaine.com Service Code"""

from unpacker import unpack as Unpack

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_PACKED = Regex(r"<script type=.text/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_SOURCES = Regex(r'sources *?\: *?(\[.*?\{[^\]]+\}.*?\]),')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    try:
        html = HTML.ElementFromURL(nurl, headers={'User-Agent': USER_AGENT}, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(nurl))
        raise Ex.MediaNotAvailable

    title = html.xpath('//h3/text()')
    if not title:
        raise Ex.MediaExpired

    page = get_embed_page(url)
    if not page:
        raise Ex.MediaNotAvailable

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='AllVid'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    page = get_embed_page(url)
    r = RE_SOURCES.search(page) if page else None
    if not r:
        raise Ex.MediaNotAvailable

    s = r.group(1).replace("'", '"')
    if '"file"' not in s:
        s = s.replace('file', '"file"')
    if '"label"' not in s:
        s = s.replace('label', '"label"')

    sources = JSON.ObjectFromString(s)
    sources = [{'file': s['file'], 'label': int(s['label'])} for s in sources if 'label' in s.keys()]
    if not sources:
        raise Ex.MediaExpired

    Log(u"* AllVid Video Sources: '{0}'".format(sources))
    return [
        MediaObject(
            audio_channels=2,
            video_resolution=str(s['label']),
            optimized_for_streaming=False,
            parts=[
                PartObject(
                    key=s['file'],
                    http_headers={'User-Agent': USER_AGENT}
                    )
                ]
            ) for s in reversed(Util.ListSortedByKey(sources, 'label'))
        ]

####################################################################################################
def get_embed_page(url):
    http_headers = {
        'User-Agent': USER_AGENT,
        'Referer': url.replace('/embed-', '/') if '/embed-' in url else url
        }

    try:
        html = HTML.ElementFromURL(url, headers=http_headers, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    eurl = html.xpath('//iframe/@src')
    if not eurl:
        Log.Error(u"* Error: Cannot find 'iframe/@src' in '{0}'".format(url))
        raise Ex.MediaNotAvailable

    try:
        http_headers['Referer'] = url
        page = HTTP.Request(eurl[0], headers=http_headers).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(eurl[0]))
        raise Ex.MediaNotAvailable

    packed = RE_PACKED.search(page)
    if packed:
        return Unpack(packed.group(1))

    return False
