#!/usr/bin/env python

"""VShare.eu Service Code"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"<script type=.text/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_THUMB = Regex(r'["\']?image["\']?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\']+(?<!m3u8|smil))["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    try:
        html = HTML.ElementFromURL(nurl, headers={'User-Agent': USER_AGENT}, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(nurl))
        raise Ex.MediaNotAvailable

    if '404 Not Found' in html.xpath('//title/text()'):
        raise Ex.MediaExpired

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaNotAvailable

    data = get_data(url)
    if not data['url']:
        Log.Warn(u"* Warning: Cannot find Video URL for '{0}'".format(url))
        raise Ex.MediaExpired
    elif not check_url(data['url']):
        Log.Warn(u"* Warning: Video URL Offline for '{0}'".format(url))
        raise Ex.MediaExpired

    return VideoClipObject(
        title=title[0],
        thumb=Resource.ContentsOfURLWithFallback([data['thumb'], FALLBACK]),
        duration=data['duration'],
        source_title='VShare'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    data = get_data(url)
    if not data['url']:
        raise Ex.MediaExpired
    elif not check_url(data['url']):
        Log.Warn(u"* Warning: Video URL Offline for '{0}'".format(url))
        raise Ex.MediaExpired

    Log.Debug(u'* PlayVideo URL = {0}'.format(data['url']))
    return IndirectResponse(VideoClipObject, key=data['url'])

####################################################################################################
def get_data(url):
    nurl = url.replace('/embed-', '/') if '/embed-' in url else url
    try:
        page = HTTP.Request(url, headers={'User-Agent': USER_AGENT, 'Referer': nurl}, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    packed = RE_PACKED.search(page)
    if packed:
        page = Unpack(packed.group(1))

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)
    rf = RE_FILE.search(page)

    return {
        'thumb': rt.group(1) if rt else FALLBACK,
        'duration': int(rd.group(1)) * 1000 if rd else None,
        'url': rf.group(1) if rf else None
        }

####################################################################################################
def check_url(url):
    try:
        h = HTTP.Request(url, cacheTime=10, method='HEAD', immediate=True).headers
        if 'content-type' in h:
            return 'html' not in h['content-type']
        elif 'Content-Type' in h:
            return 'html' not in h['Content-Type']
    except Ex.HTTPError, e:
        Log.Exception(u"* HTTP {0} Error while checking '{1}' >>>".format(e.code, url))
    except:
        Log.Exception(u"* Error while cheking '{0}' >>>".format(url))
    return False
