#!/usr/bin/env python

"""FlashX.tv Service Code"""

from unpacker import unpack as Unpack

USER_AGENT = 'Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.23 Mobile Safari/537.36'
RE_PACKED = Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+\|file\|.+\.split\('\|'\).*?\)\))")
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\']+(?<!m3u8|smil))["\']')
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/play(?:this|it|vid)\-|/embed.php\?c\=|/)(\w+)')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url, headers={'User-Agent': USER_AGENT, 'Referer': url})
    except:
        Log.Exception(u"* Error loading '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    image = html.xpath('//meta[@property="og:image"]/@content')
    thumb = image[0] if image else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='FlashX'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
    http_headers = {'User-Agent': USER_AGENT, 'Referer': url}
    try:
        html = HTML.ElementFromURL(url, sleep=7, headers=http_headers)
    except:
        Log.Exception(u"* Error loading '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    post_values = dict()
    action_url = html.xpath('//form[@method="POST"]/@action')
    if not action_url:
        raise Ex.MediaExpired
    elif action_url[0].startswith('//'):
        aurl = 'http:' + action_url[0]
    else:
        aurl = action_url[0]

    http_headers['Cookie'] = HTTP.CookiesForURL(url)
    for item in html.xpath('//form[@method="POST"]/input'):
        post_values[item.get('name')] = item.get('value')

    try:
        page = HTTP.Request(aurl, encoding='utf8', errors='ignore', values=post_values, headers=http_headers).content
    except:
        Log.Exception(u"* Error handling '{0}' >>>".format(aurl))
        raise Ex.MediaNotAvailable

    packed = RE_PACKED.search(page)
    if packed:
        vurl = RE_FILE.search(Unpack(packed.group(1)))
        if vurl:
            Log.Debug(u"* PlayVideo URL = {0}".format(vurl.group(1)))
            return IndirectResponse(VideoClipObject, key=vurl.group(1), user_agent=USER_AGENT)

    raise Ex.MediaNotAvailable
