#!/usr/bin/env python

"""TheVideos.tv Service Code"""

####################################################################################################
def NormalizeURL(url):
    r = Regex(r'(https?:\/\/(?:www\.)?\w+\.\w+)(?:\/embed-|\/)(\w+)').search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//title/text()')
    if not title:
        raise Ex.MediaExpired

    try:
        page = HTTP.Request(get_embed_url(url)).content
    except:
        raise Ex.MediaNotAvailable

    rt = Regex(r'[\'\"]?image[\'\"]?\s*?\:\s*?[\'\"](http[^\'\"]+)[\'\"]').search(page)
    rd = Regex(r'[\'\"]?duration[\'\"]?\s*?\:\s*?[\'\"](\d+)[\'\"]').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1).strip('\'\" ') if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title[0].strip(),
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='TheVideos'
        )

####################################################################################################
def MediaObjectsForURL(url):

    mo = []
    eurl = get_embed_url(url)
    fmt_list = source_dict(eurl)
    for item in reversed(sorted(fmt_list, key=lambda k: k['label'])):
        mo.append(MediaObject(
            video_resolution=item['label'],
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[PartObject(key=Callback(PlayVideo, url=eurl, label=item['label']))]
            ))

    if len(mo) != 0:
        return mo

    raise Ex.MediaNotAvailable

####################################################################################################
@indirect
def PlayVideo(url, label, **kwargs):

    fmt_list = source_dict(url)
    for item in fmt_list:
        if label == item['label']:
            Log.Debug('* PlayVideo URL  = %s' %item['file'])
            return IndirectResponse(VideoClipObject, key=item['file'])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_embed_url(url):
    r = Regex(r'(https?:\/\/(?:www\.)?\w+\.\w+\/)(\w+)').search(url)
    return r.group(1) + 'embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def source_dict(url):
    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    sources = Regex(r'sources:\s*?(\[[^\]]+\])').search(page)
    if not sources:
        raise Ex.MediaExpired

    s = sources.group(1)
    s = s.replace('\'', '\"').replace('label', '\"label\"').replace('file', '\"file\"')

    j = JSON.ObjectFromString(s)
    return [({"label": int(l['label'][:-1]), "file": l['file']}) for l in j]
