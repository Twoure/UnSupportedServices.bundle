#!/usr/bin/env python

"""TheVideos.tv Service Code"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed-|/)(\w+)')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_SOURCES = Regex(r'sources: *?(\[[^\]]+\])')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromString(get_page(url.replace('/embed-', '/') if '/embed-' in url else url))
    title = html.xpath('//title/text()')
    if not title:
        raise Ex.MediaExpired

    page = get_page(url)

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1).strip('\'\" ') if rt else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='TheVideos'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    mo = list()
    fmt_list = source_dict(url)
    if not fmt_list:
        raise Ex.MediaNotAvailable

    Log(u"* TheVideos Video Sources: '{0}'".format(fmt_list))
    return [
        MediaObject(
            video_resolution=str(item['label']),
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=item['file'])
                ]
            ) for item in reversed(Util.ListSortedByKey(fmt_list, 'label'))
        ]

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def source_dict(url):
    sources = RE_SOURCES.search(get_page(url))
    if not sources:
        Log.Warn(u"* Warning: Cannot find sources within '{0}'".format(url))
        raise Ex.MediaExpired

    s = sources.group(1).replace("'", '"')
    if '"file"' not in s:
        s = s.replace('file', '"file"')
    if '"label"' not in s:
        s = s.replace('label', '"label"')

    return [({"label": int(l['label'][:-1]), "file": l['file']}) for l in JSON.ObjectFromString(s)]
