#!/usr/bin/env python

"""Up2stream.com Service Code"""

from unpacker import unpack as Unpack

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
HTTP_HEADERS = {'User-Agent': USER_AGENT}
RE_PACKED = Regex(r"(eval\(function\(p,a,c,k,e,.+\|src\|.+\.split\('\|'\).*?\)\))")
RE_SRC = Regex(r'[\"\']?src[\"\']?\s*?\,\s*?[\"\'](http[^\"\']+(?<!m3u8|smil))[\"\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    if not 'view.php?' in url:
        url = url.replace('?', 'view.php?')
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=10)
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    htitle = html.xpath('//title/text()')
    source_title = 'Up2stream'
    title = source_title
    if htitle:
        rtitle = Regex(r'[Uu]p2stream\.\w+\s+\-\s+(.+)').search(htitle[0])
        if not rtitle:
            raise Ex.MediaExpired
        title = rtitle.group(1) if rtitle else htitle[0]

    thumb = html.xpath('//video/@poster')
    thumb = thumb[0] if thumb else FALLBACK

    return VideoClipObject(
        title=title,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='Up2stream'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, headers=HTTP_HEADERS, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable

    packed = RE_PACKED.search(page)
    if packed:
        data = Unpack(packed.group(1))
        if data:
            vurl = RE_SRC.search(data)
            if vurl:
                Log.Debug(u"* PlayVideo URL = {0}".format(vurl.group(1)))
                return IndirectResponse(VideoClipObject, key=vurl.group(1), user_agent=USER_AGENT)

    raise Ex.MediaNotAvailable
