#!/usr/bin/env python

"""AUEngine.com Service Code"""

####################################################################################################
def NormalizeURL(url):

    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)(?:embed\.php\?file\=|video\/)(\w+)').search(url)
    return r.group(1) + 'embed.php?file=' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    title = Regex(r'\<title\>(.+)\<\/title\>').search(page)
    if not title:
        raise Ex.MediaExpired

    rt = Regex(r'var\s*?the\_image\s*?\=\s*?[\'\"](http[^\'\"]+)').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1) if rt else fallback

    return VideoClipObject(
        title=title.group(1).strip(),
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='AUEngine'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url).content
    except:
        raise Ex.MediaNotAvailable

    r = Regex(r'var\s*?video\_link\s*?\=\s*?[\'\"](http[^\'\"]+(?<!m3u8|smil))').search(page)
    if r:
        Log.Debug('* PlayVideo ULR = %s' %r.group(1))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    raise Ex.MediaNotAvailable
