#!/usr/bin/env python

"""FileRev.cc Service Code"""

import urllib
import urllib2
import contextlib

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    return VideoClipObject(
        title=title[0].strip(),
        thumb='http://i.imgur.com/75YO83o.jpg',
        source_title='FileRev'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agent': USER_AGENT}
    try:
        html1 = HTML.ElementFromURL(url, headers=http_headers)
    except:
        raise Ex.MediaNotAvailable

    data = dict()
    for item in html1.xpath('//input'):
        data.update({item.get('name'): item.get('value')})

    if data:
        http_headers.update({'Referer': url})
        html2 = HTML.ElementFromString(HTTP.Request(url, headers=http_headers, values=data).content)
        data.clear()

    for item in html2.xpath('//input'):
        data.update({item.get('name'): item.get('value')})

    if data:
        vurl = urllib2_post_head(url, data, url)
        if vurl:
            Log.Debug('* PlayVideo URL = %s' %vurl)
            return IndirectResponse(VideoClipObject, key=vurl)

    raise Ex.MediaNotAvailable

####################################################################################################
def urllib2_post_head(url, values, ref_url):
    data = urllib.urlencode(values)

    class NoRedirection(urllib2.HTTPErrorProcessor):
        def http_response(self, request, response):
            return response
        https_response = http_response

    opener = urllib2.build_opener(NoRedirection)
    opener.addheaders = [('User-Agent', USER_AGENT), ('Referer', ref_url)]

    try:
        with contextlib.closing(opener.open(url, data=data,)) as resp:
            h = resp.headers
            return h['Location'] if 'Location' in h.keys() else (h['location'] if 'location' in h.keys() else url)
    except urllib2.HTTPError, e:
        Log.Error('* urllib2_post_head: %s' %str(e))

    return url
