#!/usr/bin/env python

"""OK.ru Service Code"""

USER_AGENT= 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):

    r = Regex(r'(https?\:\/\/(?:www\.)?ok\.\w+\/)(?:video(?:embed)?\/|dk\?.+?mid\=)([0-9]+)').search(url)
    return r.group(1) + 'dk?cmd=videoPlayerMetadata&mid=' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        data = JSON.ObjectFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    if data.get('error', '') == 'forbidden':
        raise Ex.MediaExpired
    elif data['movie']['status'] != 'OK':
        raise Ex.MediaExpired

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    title = data['movie']['title']
    duration = int(data['movie']['duration']) * 1000
    thumb = data['movie']['poster']

    return VideoClipObject(
        title=title,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='OK'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            bitrate=bitrate,
            video_resolution=res,
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url, label=label))
                ]
            ) for label, res, bitrate in [('full', 1080, 3200), ('hd', 720, 2350), ('sd', 480, 1120), ('low', 360, 600), ('lowest', 240, 300), ('mobile', 144, 120)]
        ]

####################################################################################################
@indirect
def PlayVideo(url, label, **kwargs):

    http_headers = {'User-Agent': USER_AGENT}
    try:
        data = JSON.ObjectFromURL(url, headers=http_headers)
    except:
        raise Ex.MediaNotAvailable

    vurl = None
    for item in data['videos']:
        vurl = item['url']
        if label == item['name']:
            break

    if vurl:
        Log.Debug('* PlayVideo ULR = %s' %item['url'])
        return IndirectResponse(VideoClipObject, key=item['url'], http_headers=http_headers)

    raise Ex.MediaNotAvailable
