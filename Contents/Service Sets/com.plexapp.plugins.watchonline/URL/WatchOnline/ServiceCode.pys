#!/usr/bin/env python

"""WatchOnline.to Service Code"""

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):
    if '/embed-' in url:
        url = url.replace('/embed-', '/').split('-')[0]
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url).content
        html = HTML.ElementFromString(page)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//meta[@property="og:title"]/@content')
    if title:
        title = title[0].strip()
    else:
        title = html.xpath('//title/text()')
        if title:
            title = (title[0].replace('Watch Watch', 'Watch') if title[0].startswith('Watch Watch') else title[0].replace('Watch ', '')).strip()

    if not title:
        raise Ex.MediaExpired

    try:
        epage = HTTP.Request(get_embed_url(url)).content
    except:
        raise Ex.MediaNotAvailable

    rt = Regex(r'[\"\']?image[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+)[\"\']').search(epage)
    rd = Regex(r'[\"\']?duration[\"\']?\s*?\:\s*?[\"\'](\d+)[\"\']').search(epage)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1) if rt else fallback
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='WatchOnline'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts=[PartObject(
                key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
                )]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agent': USER_AGENT}
    try:
        page = HTTP.Request(get_embed_url(url), headers=http_headers).content
    except:
        raise Ex.MediaNotAvailable

    r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+\.m3u8)[\"\']').search(page)
    if r:
        Log.Debug('* PlayVideo ULR = %s' %r.group(1))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_embed_url(url):
    if '/embed-' not in url:
        r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)([A-Za-z0-9]+)').search(url)
        url = r.group(1) + 'embed-'+ r.group(2) + '.html'
    return url
