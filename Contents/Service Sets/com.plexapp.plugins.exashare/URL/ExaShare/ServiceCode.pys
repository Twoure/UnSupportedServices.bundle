#!/usr/bin/env python

"""
ExaShare.com | Ajihezo.info Service Code

This code also works for YouWatch.org | Chouhaa.info, but those require a Referer value to access
video URLs which Plex Framework is not setup to do yet, but can since Transcoder built off of ffmpeg.
"""

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)embed\-(\w+)').search(url)
        url = r.group(1) + r.group(2)
    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    vid = Regex(r'https?\:\/\/(?:www\.)?\w+\.\w+\/(\w+)').search(url).group(1)
    ier = html.xpath('//input[@id="ier"]/@value')
    if not ier:
        raise Ex.MediaExpired

    r = Regex(r'%s\]\[IMG\](http[^\[]+)\[\/IMG\](\[?[^\[]+)\[\/URL\]\[\d+x\d+\,\s*?([^\]]+)' %vid).search(ier[0])
    st = Regex(r'https?\:\/\/(?:www\.)?(\w+)\.\w+').search(url)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb1 = r.group(1).strip()
    thumb2 = Regex(r'_t\.').sub(r'_xt.', thumb1)
    thumb3 = Regex(r'_t\.').sub(r'.', thumb1)
    title = r.group(2).strip()
    duration = r.group(3).strip()

    return VideoClipObject(
        title=title,
        duration=Datetime.MillisecondsFromString(duration) if duration else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb3, thumb2, thumb1, fallback]),
        source_title=st.group(1).title() if st else 'ExaShare'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    http_headers = {'User-Agent': USER_AGENT}
    try:
        html = HTML.ElementFromURL(get_embed_url(url), headers=http_headers)
    except:
        raise Ex.MediaNotAvailable

    eurl = html.xpath('//iframe/@src')
    if eurl:
        page = HTTP.Request(eurl[0], headers=http_headers).content
        r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\'\?]+(?<!m3u8|smil))[\"\']').search(page)
        if r:
            Log.Debug('* PlayVideo ULR = %s' %r.group(1))
            return IndirectResponse(VideoClipObject, key=r.group(1), http_headers=http_headers)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_embed_url(url):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+\/)(\w+)').search(url)
    return r.group(1) + 'embed-' + r.group(2) + '.html'
