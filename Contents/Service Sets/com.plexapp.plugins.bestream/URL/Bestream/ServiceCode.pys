#!/usr/bin/env python

"""BeStream.tv Service Code"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+/)(?:plugins/mediaplayer/site/\_embed\.php\?u\=)?(\w+)')
RE_TITLE = Regex(r'(?:^Watch +?|^)(.+?)(?:(?: +?\- +?[Bb]est [Ss]tream +?\- +?)|$)')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)')
RE_FILE = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\']+(?<!m3u8|smil))["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + 'plugins/mediaplayer/site/_embed.php?u=' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('plugins/mediaplayer/site/_embed.php?u=', '') if '_embed.php' in url else url
    html = HTML.ElementFromString(get_page(nurl))

    title = html.xpath('//h1/text()')
    if not title:
        title = html.xpath('//meta[@property="og:title"]/@content')
        if not title:
            raise Ex.MediaExpired

    data = get_data(url)
    if 'url' not in data.keys():
        raise Ex.MediaNotAvailable

    thumb = data['thumb'] if 'thumb' in data.keys() else FALLBACK

    return VideoClipObject(
        title=RE_TITLE.sub(r'\1', title[0].strip()),
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='BeStream'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    data = get_data(url)
    if 'url' in data.keys():
        Log.Debug(u"* PlayVideo URL = {0}".format(data['url']))
        return IndirectResponse(VideoClipObject, key=data['url'])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def get_data(url):
    data = dict()
    page = get_page(url)

    v = RE_FILE.search(page)
    t = RE_THUMB.search(page)

    if v and check_url(v.group(1), url):
        data['url'] = v.group(1)
    if t:
        data['thumb'] = t.group(1)

    return data

####################################################################################################
def check_url(url, rurl):
    try:
        h = HTTP.Request(url, headers={'Referer': rurl}, method='HEAD', cacheTime=10).headers
        return 'html' not in h['content-type']
    except:
        Log.Exception(u"* Error checking '{0}' >>>".format(url))
    return False
