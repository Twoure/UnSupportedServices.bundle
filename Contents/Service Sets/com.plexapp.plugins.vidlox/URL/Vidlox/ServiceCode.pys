#!/usr/bin/env python

"""Vidlox.tv Service Code"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed-|/)(\w+)')
RE_THUMB = Regex(r'["\']?image["\']? *?\: *?["\'](http[^"\']+)["\']')
RE_DUR = Regex(r'["\']?duration["\']? *?\: *?["\'](\d+)["\']')
RE_HLS = Regex(r'["\']?file["\']? *?\: *?["\'](http[^"\']+\.m3u8)["\']')
RE_SOURCES = Regex(r'(?is)bandwidth\=(\d+).*?resolution\=\d+x(\d+).*?(http.+?\.m3u8)')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/' + r.group(2)

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url)
    html = HTML.ElementFromString(page)

    title = html.xpath('//h1/text()')
    if not title:
        raise Ex.MediaExpired

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title[0].strip(),
        duration=int(rd.group(1))*1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='Vidlox'
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    hls = RE_HLS.search(get_page(url))
    if not hls:
        raise Ex.MediaExpired

    sources = RE_SOURCES.findall(get_page(hls.group(1)))
    if not sources:
        raise Ex.MediaNotAvailable

    sources = [(int(r), int(b)/1000, u) for (b, r, u) in sources]
    Log(u"* Vidlox Video Sources: '{0}'".format(sources))

    return [
        MediaObject(
            video_resolution=str(res),
            bitrate=bit,
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=HTTPLiveStreamURL(src))
                ],
            ) for res, bit, src in reversed(sorted(sources))
        ]

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
