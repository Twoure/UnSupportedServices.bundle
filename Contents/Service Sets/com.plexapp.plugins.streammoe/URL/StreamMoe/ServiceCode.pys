#!/usr/bin/env python

"""Stream.moe Service Code"""

RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/embed/|/)(\w+)')
RE_ATOB = Regex(r'contents *?\= *?atob\(["\']([^"\']+)')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed/' + r.group(2)

####################################################################################################
def MetadataObjectForURL(url):

    page = get_page(url)
    html = HTML.ElementFromString(page)

    title = html.xpath('//title/text()')
    if not title:
        raise Ex.MediaExpired

    atob_html = atob(page)
    if (atob_html is not None):
        poster = atob_html.xpath('//video/@poster')
        thumb = poster[0] if poster else FALLBACK

        return VideoClipObject(
            title=title[0].split(' - Stream.moe')[0].strip(),
            thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
            source_title='StreamMoe'
            )

    raise Ex.MediaNotAvailable

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    html = atob(get_page(url))
    if (html is not None):
        vurl = html.xpath('//source/@src')
        if vurl:
            Log.Debug(u"* PlayVideo URL = {0}".format(vurl[0]))
            return IndirectResponse(VideoClipObject, key=vurl[0])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page

####################################################################################################
def atob(page):
    r = RE_ATOB.search(page)
    try:
        return HTML.ElementFromString(String.Base64Decode(r.group(1))) if r else False
    except:
        Log.Exception(u"* Error: Cannot decode atob within '{0}' >>>".format(url))
    return False
