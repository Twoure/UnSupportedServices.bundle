#!/usr/bin/env python

"""
New WholeCloud Service Code
Added new host and simplified code
better error handling
Host:
    movshare | wholecloud, novamov | auroravid, videoweed | bitvid,
    cloudtime, nowvideo, vidgg, cloudy.ec | videoraj.to
"""

from urllib import quote, unquote
import urllib2
import contextlib

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'

####################################################################################################
def NormalizeURL(url):

    url = url_check(url.replace('nowvideo.eu', 'nowvideo.li'), geturl=True)
    if '/embed/' in url:
        r = Regex(r'(?i)(https?\:\/\/(?:www\.)?\w+\.\w+)\/(?:\w+\/|embed\.php)?(?:\?\w+\=)?([0-9a-z]+)').search(url)
        v = '/v/' if Regex(r'(cloudy|videoraj)').search(r.group(1)) else '/video/'
        url = r.group(1) + v + r.group(2)

    return url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//meta[@property="og:title"]/@content')
    if not title:
        title = html.xpath('//meta[@name="title"]/@content')
        if not title:
            title = source_title
        elif len(title[0]) > 0:
            title = title[0].strip()
        else:
            title = source_title
    else:
        title = title[0].split('Watch ')[-1].split(' online ')[0].strip()

    if Regex(r'(?i)(auroravid|bitvid|cloudtime|movshare|novamov|nowvideo|videoweed|vidgg|wholecloud)\s-\s(.+)').search(title):
        title = title.split(' - ')[0].strip()
    elif Regex(r'(?i)\s*?\|\s*?(cloudy|videoraj)').search(title):
        title = Regex(r'(?i)(.+?)\s*?\|\s*?(?:cloudy|videoraj)').search(title).group(1).strip()

    thumb = html.xpath('//meta[@property="og:image"]/@content')
    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = thumb[0] if thumb else fallback

    # test if video url returns an error, if so then do not display link
    vurl = setup_playvideo(url)
    if vurl == "This media has expired.":
        raise Ex.MediaExpired
    elif not vurl:
        raise Ex.MediaNotAvailable

    st = Regex(r'https?\:\/\/(?:www\.)?(\w+)\.\w+').search(url)

    return VideoClipObject(
      title=title,
      thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
      source_title=st.group(1).title() if st else 'WholeCloud'
      )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    vurl = setup_playvideo(url)
    if vurl == "This media has expired.":
        raise Ex.MediaExpired
    elif not vurl:
        raise Ex.MediaNotAvailable

    Log.Debug('* PlayVideo URL = %s' %vurl)
    return IndirectResponse(VideoClipObject, key=vurl)

####################################################################################################
def get_embed_url(url):
    if '/embed/' not in url:
        r = Regex(r'(?i)(https?\:\/\/(?:www\.)?(\w+)\.\w+)\/\w+\/(?:\?\w+\=)?([0-9a-z]+)').search(url)
        v = 'id' if Regex(r'(vidgg|cloudy|videoraj)').search(r.group(2)) else 'v'
        e = 'embed.php' if Regex(r'(cloudy|videoraj)').search(r.group(2)) else 'embed/'
        url = r.group(1) + '/%s?%s=' %(e, v) + r.group(3)
    return url

####################################################################################################
def setup_playvideo(url):

    page = HTTP.Request(get_embed_url(url), headers={'User-Agent': USER_AGENT}).content

    keys = ['filekey', 'file', 'domain']
    apid = {}
    for k in keys:
        value = None
        r = Regex(r'flashvars\.%s\=\s*?[\'\"]?([^\"\']+)[\'\"]?\;' %k).search(page)
        r2 = Regex(r'%s\s*?\:\s*?[\'\"]?([^\'\"]+)[\'\"]?\,' %('key' if k == 'filekey' else k)).search(page)
        if r:
            if k == 'filekey':
                fkr = Regex(r'var\s%s\=\s*?[\'\"]?([^\"\']+)[\'\"]?\;' %r.group(1)).search(page)
                if fkr:
                    value = fkr.group(1).replace('.', '%2E').replace('-', '%2D')
                else:
                    value = r.group(1).replace('.', '%2E').replace('-', '%2D')
            else:
                value = r.group(1)
        elif r2:
            if k == 'key':
                value = r2.group(1).replace('.', '%2E').replace('-', '%2D')
            else:
                value = r2.group(1)

        if value:
            apid.update({k: value.strip(';')})

    if len(apid.keys()) != 3:
        raise Ex.MediaNotAvailable

    domain = apid['domain'][:-1] if apid['domain'].endswith('/') else apid['domain']
    data_url = '%s/api/player.api.php?key=%s&file=%s' %(domain, apid['filekey'], apid['file'])
    vurl = get_video_url(data_url)

    return vurl if vurl else False

####################################################################################################
def url_check(url, geturl=False):
    try:
        req = urllib2.Request(url, headers={'User-Agent': USER_AGENT})
        req.get_method = lambda : 'HEAD'
        try:
            with contextlib.closing(urllib2.urlopen(req)) as resp:
                return resp.geturl() if geturl else True
        except urllib2.HTTPError, e:
            Log.Error('* check_url: %s' %str(e))
    except Exception as er:
        Log.Critical('* check_url: %s' %str(er))
    return False

####################################################################################################
def get_video_url(url, count=0):
    match = True
    while match or (count <= 3):
        count += 1
        data = HTTP.Request(url, headers={'User-Agent': USER_AGENT}).content
        if 'error' in data:
            Log.Error('* PlayVideo Error: %s' %str(data))
            if data.split('error_msg=')[1] == 'The video no longer exists':
                return "This media has expired."
            match = False
        elif 'url' in data:
            vurl = data.split('url=')[1].split('&')[0]
            vurl = unquote(vurl) if Regex(r'(cloudy|videoraj)').search(url) else vurl
            if (count == 1) and not url_check(vurl):
                nurl = url + '&errorCode=404&errorUrl=' + quote(vurl, '').replace('.', '%2E')
                Log.Warn('* Video URL %i faild. Sending Error URL to WholeCloud API to get corrected URL' %count)
                Log.Warn('* New API URL = %s' %nurl)
                return get_video_url(nurl, count)
            return vurl
        else:
            match = False

    Log.Critical('* No video source found for %s' %url)
    return False
