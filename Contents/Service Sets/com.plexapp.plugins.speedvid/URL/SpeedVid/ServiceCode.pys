#!/usr/bin/env python

"""Speedvid.net Service Code"""

####################################################################################################
def NormalizeURL(url):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.\w+)(?:\/embed\-|\/)([A-Za-z0-9]+)').search(url)
    return r.group(1) + '/' + r.group(2) if r else url

####################################################################################################
def MetadataObjectForURL(url):

    try:
        page = HTTP.Request(url, cacheTime=10).content
        html = HTML.ElementFromString(page)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//div[@class="dltitre"]/text()')
    if title:
        title = title[0]
    else:
        title = html.xpath('//title/text()')
        if title:
            title = Regex(r'^Watch\s+?(.+?)$').sub(r'\1', title[0].strip())
        else:
            raise Ex.MediaExpired

    rt = Regex(r'[\"\']?image[\"\']?\s*?\:\s*?[\"\'](http[^\"\']+)[\"\']').search(page)
    ht = html.xpath('//video/@poster')
    rd = Regex(r'[\"\']?duration[\"\']?\s*?\:\s*?[\"\'](\d+)[\"\']').search(page)

    fallback = 'http://i.imgur.com/75YO83o.jpg'
    thumb = rt.group(1) if rt else (ht[0] if ht else fallback)
    duration = int(rd.group(1)) * 1000 if rd else None

    return VideoClipObject(
        title=title,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback([thumb, fallback]),
        source_title='SpeedVid'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        raise Ex.MediaNotAvailable

    r = Regex(r'[\"\']?file[\"\']?\s*?\:\s*?[\"\'](http[^\"\'\?]+(?<!m3u8|smil))[\"\']').search(page)
    if r:
        Log.Debug(u"* PlayVideo URL = {0}".format(r.group(1)))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    html = HTML.ElementFromString(page)
    r2 = html.xpath('//video/source/@src')
    if r2:
        Log.Debug(u"* PlayVideo URL = {0}".format(r2[0]))
        return IndirectResponse(VideoClipObject, key=r2[0])

    raise Ex.MediaNotAvailable
