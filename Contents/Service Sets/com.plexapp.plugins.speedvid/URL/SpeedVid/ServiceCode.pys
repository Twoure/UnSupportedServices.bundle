#!/usr/bin/env python

"""
Speedvid.net Service Code
    :Pull almost info from embed page.
    :Title from main URL
"""

from unpacker import unpack as Unpack

RE_PACKED = Regex(r"(?s)<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+?\|file\|.+?\.split\('\|'\).*?\)\)).?</script>")
RE_NORM = Regex(r'(https?://(?:www\.)?\w+\.\w+)(?:/embed\-|/)(\w+)')
RE_THUMB = Regex(r'\\?["\']?image\\?["\']? *?\: *?\\?["\'](https?[^"\'\\]+)\\?["\']')
RE_DUR = Regex(r'\\?["\']?duration\\?["\']? *?\: *?\\?["\'](\d+)\\?["\']')
RE_FILE = Regex(r'\\?["\']?file\\?["\']? *?\: *?\\?["\'](https?[^"\'\?\\]+(?<!m3u8|smil))\\?["\']')
FALLBACK = 'http://i.imgur.com/75YO83o.jpg'

####################################################################################################
def NormalizeURL(url):

    r = RE_NORM.search(url)
    return r.group(1) + '/embed-' + r.group(2) + '.html' if r else url

####################################################################################################
def MetadataObjectForURL(url):

    nurl = url.replace('/embed-', '/').split('.htm')[0]
    html = HTML.ElementFromString(get_page(nurl))

    title = html.xpath('//div[@class="dltitre"]/text()')
    if not title:
        Log.Warn(u"* Warning: Ttile missing, assuming File missing for '{0}'".format(url))
        raise Ex.MediaExpired

    page = get_ppage(url, get_page(url))

    rt = RE_THUMB.search(page)
    rd = RE_DUR.search(page)

    thumb = rt.group(1) if rt else FALLBACK

    return VideoClipObject(
        title=title[0].split(' - Speedvid')[0].strip(),
        duration=int(rd.group(1)) * 1000 if rd else None,
        thumb=Resource.ContentsOfURLWithFallback([thumb, FALLBACK]),
        source_title='SpeedVid'
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming=True,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    page = get_ppage(url, get_page(url))
    r = RE_FILE.search(page)
    if r:
        Log.Debug(u"* PlayVideo URL = {0}".format(r.group(1)))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    html = HTML.ElementFromString(page)
    r2 = html.xpath('//video/source/@src')
    if r2:
        Log.Debug(u"* PlayVideo URL = {0}".format(r2[0]))
        return IndirectResponse(VideoClipObject, key=r2[0])

    raise Ex.MediaNotAvailable

####################################################################################################
def get_ppage(url, page):
    norm = RE_NORM.search(url)
    for p in RE_PACKED.findall(page):
        if norm.group(2) not in Unpack(p):
            continue
        return Unpack(p)
    return page

####################################################################################################
def get_page(url):
    try:
        page = HTTP.Request(url, cacheTime=10).content
    except:
        Log.Exception(u"* Error: Cannot open '{0}' >>>".format(url))
        raise Ex.MediaNotAvailable
    return page
